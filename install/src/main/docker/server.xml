<Server>

   <!-- Use a custom version of StandardService that allows the
   connectors to be started independent of the normal lifecycle
   start to allow web apps to be deployed before starting the
   connectors.
   -->
   <Service name="jboss.web"
      className="org.jboss.web.tomcat.tc5.StandardService">

      <!-- A HTTP/1.1 Connector on port 8080 -->
      <Connector port="8080" address="${jboss.bind.address}"
         maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
         enableLookups="false" redirectPort="8443" acceptCount="100"
         connectionTimeout="20000" disableUploadTimeout="true"
         maxHttpHeaderSize="16000"/>

      <!-- A AJP 1.3 Connector on port 8009 
      <Connector port="8009" address="${jboss.bind.address}"
         enableLookups="false" redirectPort="8443" debug="0"
         protocol="AJP/1.3"/>
-->
      <!-- SSL/TLS Connector configuration using the admin devl guide keystore
      
      <Connector port="8443" address="${jboss.bind.address}"
           maxThreads="100" minSpareThreads="5" maxSpareThreads="15"
           scheme="https" secure="true" clientAuth="want"
           truststoreFile="${jboss.server.home.dir}/conf/test.keystore"
           truststorePass="contrasenya"
           keystoreFile="${jboss.server.home.dir}/conf/test.keystore"
           keystorePass="contrasenya" sslProtocol = "TLS" 
           proxyName="${tomcat.sslProxyName}" proxyPort="${tomcat.sslProxyPort}"
           maxHttpHeaderSize="16000"/>
      -->

      <Engine name="jboss.web" defaultHost="localhost">

         <!-- The JAAS based authentication and authorization realm implementation
            - certificatePrincipal : the class name of the
            org.jboss.security.auth.certs.CertificatePrincipal impl
            used for mapping X509[] cert chains to a Princpal.
         -->
         <Realm className="org.jboss.web.tomcat.security.JBossSecurityMgrRealm"
            certificatePrincipal="es.caib.loginModule.auth.cert.SeyconMapping"
            />

         <Logger className="org.jboss.web.tomcat.Log4jLogger"
            verbosityLevel="WARNING"
            category="org.jboss.web.localhost.Engine"/>

         <Host name="localhost"
            autoDeploy="false" deployOnStartup="false" deployXML="false">

            <Valve className="es.caib.loginModule.auth.ClientIPValve" />
            <Valve className="es.caib.loginModule.auth.FormResourcesValve" />
            <!-- Uncomment to enable request dumper. This Valve "logs interesting 
                 contents from the specified Request (before processing) and the 
                 corresponding Response (after processing). It is especially useful 
                 in debugging problems related to headers and cookies."
            -->
            <!--
            <Valve className="org.apache.catalina.valves.RequestDumperValve" />
            -->

            <!-- Access logger -->
            <!--
            <Valve className="org.apache.catalina.valves.AccessLogValve"
               prefix="localhost_access_log." suffix=".log"
               pattern="common" directory="${jboss.server.home.dir}/log" 
               resolveHosts="false" />
            -->

            <!-- Uncomment to enable single sign-on across web apps
               deployed to this host. Does not provide SSO across a cluster.     
            
               If this valve is used, do not use the JBoss SingleSignOn valve 
               shown below. 
            -->
            <!--
            <Valve className="org.apache.catalina.authenticator.SingleSignOn"
               debug="0"/>
            -->

            <!-- Uncomment to enable single sign-on across web apps
               deployed to this host AND to all other hosts in the cluster.
            
               If this valve is used, do not use the standard Tomcat SingleSignOn
               valve shown above.
            
               Valve uses a JBossCache instance to support SSO credential 
               caching and replication across the cluster.  The JBossCache 
               instance must be configured separately.  By default, the valve 
               shares a JBossCache with the service that supports HttpSession 
               replication.  See the "tc5-cluster-service.xml" file in the 
               server/all/deploy directory for cache configuration details.
            
               Besides the attributes supported by the standard Tomcat
               SingleSignOn valve (see the Tomcat docs), this version also 
               supports the following attribute:
            
               treeCacheName  JMX ObjectName of the JBossCache MBean used to 
                              support credential caching and replication across
                              the cluster. If not set, the default value is 
                              "jboss.cache:service=TomcatClusteringCache", the 
                              standard ObjectName of the JBossCache MBean used 
                              to support session replication.
            -->
            <!--
            <Valve className="org.jboss.web.tomcat.tc5.sso.ClusteredSingleSignOn" />
            -->
         
            <!-- Uncomment to check for unclosed connections and transaction terminated checks
                 in servlets/jsps.
                 Important: You need to uncomment the dependency on the CachedConnectionManager
                            in META-INF/jboss-service.xml
            <Valve className="org.jboss.web.tomcat.tc5.jca.CachedConnectionValve"
                cachedConnectionManagerObjectName="jboss.jca:service=CachedConnectionManager"
                transactionManagerObjectName="jboss:service=TransactionManager" />
            -->

            <!-- Default context parameters -->
            <DefaultContext cookies="true" crossContext="true" override="true"/>

         </Host>

      </Engine>

   </Service>

</Server>
