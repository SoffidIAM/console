/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat (TomEE)/7.0.68 (1.7.4-SNAPSHOT)
 * Generated at: 2016-11-30 13:52:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;
import javax.management.*;
import javax.naming.*;
import org.apache.openejb.assembler.DeployerEjb;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {





public void listAll(JspWriter out)  throws IOException
    { 
        System.setProperty(Context.INITIAL_CONTEXT_FACTORY,   
			//"org.apache.naming.java.JavaURLContextFactory");
            "org.apache.openejb.client.LocalInitialContextFactory"); 
        System.err.println(">>>>>>> FULL JNDI TREE FROM STARTUP"); 
        try { 
 			String initial = "openejb:Resource";
			initial = "openejb:";
			initial = "";
            InitialContext ic = new InitialContext(); 
            listContext(out, initial,(Context)ic.lookup(initial)); 
        } catch (Exception e) { 
            System.err.println("Could not list tree."+e);             
        } 
        System.err.println("<<<<<<< FULL JNDI TREE FROM STARTUP");                 
    } 

    private static final void listContext(JspWriter out, String s, Context c) throws NamingException , IOException
    { 
        NamingEnumeration<NameClassPair> pairs = c.list(""); 
        for (; pairs.hasMoreElements();) 
        { 
            NameClassPair p = pairs.next(); 
			try {
            	out.println("<tr><td>"+s+"/"+p.getName() + "</td><td>" + p.getClassName()+"</td></tr>"); 
            	Object o = c.lookup(p.getName()); 
            	if (o instanceof Context) 
            	{ 
                	Context child = (Context) o; 
                	listContext(out, s+"/"+p.getName(), child); 
            	} 
			} catch (Exception e) {
            	out.println("<tr><td>"+s+"/"+p.getName() + "</td><td>" + e.toString()+"</td></tr>");
			}
        } 
    } 

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<table>\n");


DeployerEjb ejb = new DeployerEjb ();
String home = System.getProperty("catalina.home");

out.println (home);

try {
  listAll(out);
//ejb.deploy (home+"/soffid/starting.ear");
} catch (Exception e) {
  out.println (e.toString());

}
   

      out.write("\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("hola\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
