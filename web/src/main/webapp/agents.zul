<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?page id="agents" title="Gestió dels Agents"?>
<?taglib uri="/WEB-INF/tld/web/core.dsp.tld" prefix="c" ?>
<?init class="es.caib.seycon.ng.web.CheckPermisos" arg0="agents" ?>
<?component name="input_criteri" macro-uri="comu/input_criteri.zul"?>
<?component name="input_dada" macro-uri="comu/input_dada.zul"?>
<?component name="input_etiqueta" macro-uri="comu/input_etiqueta.zul"?>
<?component name="input_password" macro-uri="comu/input_password.zul"?>
<?component name="accountMetadata" macro-uri="agent/account_metadata.zul"?>
<zk xmlns:h="http://www.w3.org/1999/xhtml">

	<style>
		.tcoth div {text-align:center !important;} tr.seld td
		div.cell-inner input.text { background-color: #D3D3D3; }
		.readonly {background-color: transparent !important}
	</style>

	<zscript src="comu/netejaCriteris.zul"/>
	<zscript src="comu/checkTruncatedResults.zul"/>

	<zscript>
		<![CDATA[
			fileres = es.caib.seycon.ng.web.Custom.FILERES_ESQUEMA;
			
			try
			{
				es.caib.zkib.zkiblaf.Application.setTitle(org.zkoss.util.resource
						.Labels.getLabel("agents.lblGestioAgents"));
			}
			catch (Exception ex){}
			
//			queryWindowMin = "50px";
//			queryWindowMax = "110px";
			
			mode = "query"; 
			view_altres = false;
		
			import es.caib.seycon.ng.utils.AutoritzacionsUsuari;
			import es.caib.zkib.datasource.*;
			canCreateAgent = AutoritzacionsUsuari.hasCreateAgent();
			canDeleteAgent = AutoritzacionsUsuari.hasDeleteAgent();
			canUpdateAgent = AutoritzacionsUsuari.hasUpdateAgent();
			canQueryAgent = AutoritzacionsUsuari.hasQueryAgent();
			canPropagateAgentUsers = AutoritzacionsUsuari.hasPropagateAgentUsers();
			canPropagateAgentUsers = AutoritzacionsUsuari.hasPropagateAgentUsers();
			canPropagateAgentGroups = AutoritzacionsUsuari.hasPropagateAgentGroups();
			canModifyAgent = canCreateAgent || canUpdateAgent;
			// regles de control d'accés (oracle)
			canCreateAccessControlAgent = AutoritzacionsUsuari.hasCreateAccessControlAgent();
			canDeleteAccessControlAgent = AutoritzacionsUsuari.hasDeleteAccessControlAgent();
			canUpdateAccessControlAgent = AutoritzacionsUsuari.hasUpdateAccessControlAgent();
			canQueryAccessControlAgent = AutoritzacionsUsuari.hasQueryAccessControlAgent();
			canModifyAccessControl = canCreateAccessControlAgent || canUpdateAccessControlAgent;
			canSetAccessControl = AutoritzacionsUsuari.hasSetAccessControlAgent();
			
			model.getVariables().declareVariable("queryEnabled", canQueryAgent);
			model.getVariables().declareVariable("codi", "%");
			model.getVariables().declareVariable("codiAgent", "%");
			model.getVariables().declareVariable("actiu", new Boolean(true));
			// Per als nous agents (inicialització)
			model.getVariables().declareVariable("codiDominiUsuaris", "CAIB");
			
			queryEnabled = false;
			retrySearch = false;
			
			void populateDetails ()
			{
				mode="query";
			}
	             
			// Method to obtain the parameters to search process
			java.util.Map getSearchParameters()
			{
				java.util.Map searchValues = new java.util.HashMap();
				
				codi = esquema.getFellow("queryWindow").getFellow("queryCodi").getFellow("textbox");
				nom = esquema.getFellow("queryWindow").getFellow("queryNom").getFellow("textbox");
				
				url = esquema.getFellow("queryWindow").getFellow("queryUrl").getFellow("textbox");
				actiu = esquema.getFellow("queryWindow").getFellow("queryActiu");
				basatRols = null;
				segur = null;
					
				// Check enable query
				if ((codi.value.trim().length() == 0) && 
						(url.value.trim().length() == 0))
				{
					queryEnabled = false;
				}
				
				else
				{
					queryEnabled = true;
				}
				
				// Add parameters to search
				searchValues.put("codi", codi.value);
				
				searchValues.put("url", url.value);
				
				if ((nom == null) || (nom.value.trim().length() == 0))
				{
					// mirem la llista
					nomLlista = esquema.getFellow("queryWindow")
						.getFellow("queryNomLlista").getSelectedItem();
					
					 // cap element seleccionat
					if (nomLlista == null)
					{
						searchValues.put("nom", nom.value);
						queryEnabled = true;
					}
					
					else
					{ //Mirem la llista
						// qualque element seleccionat
						queryEnabled = true;
						searchValues.put("nom",
								nomLlista.getValue().getInstance().getClassName());
					}
				}
				
				else
				{
					queryEnabled = true;
					model.getVariables().declareVariable("nom", nom.value);
				}
				
				if (actiu.isChecked())
				{
					queryEnabled = true;
					model.getVariables().declareVariable("actiu", new Boolean(true));
				}
				
				else
				{
					model.getVariables().declareVariable("actiu", null);
				}
				
				return searchValues;
			}
			
			void search()
			{
				java.util.Map lista = new java.util.HashMap();
				
				if (esquema.isCommitPending()) {
					Missatgebox.avis (org.zkoss.util.resource.Labels
							.getLabel("agents.Avis"),
							org.zkoss.util.resource.Labels.getLabel("agents.Canvis"));
					return;
				}
				
				if (!retrySearch)
				{
					lista = es.caib.seycon.ng.web.utils.
						Autowildcards.replaceAsteriskChar(getSearchParameters());
				}
				
				else
				{
					lista = es.caib.seycon.ng.web.utils.
							Autowildcards.addPercentChar(getSearchParameters());
				}
				
				for (String key : lista.keySet())
				{
					model.getVariables().declareVariable(key, lista.get(key));
				}
				
				model.getVariables().declareVariable("queryEnabled",
						queryEnabled && canQueryAgent);
				
				listbox = esquema.getFellow("lista").getFellow("listbox");
				if (queryEnabled)
				{
					model.getJXPathContext().getValue("/agent").refresh();
					listbox.dataPath = "/model:/agent"; 
				}
				
				if (listbox.getModel().getSize() == 1)
				{
					listbox.renderAll();
					Listitem elem = listbox.getItemAtIndex(0); 
					
					if (elem!=null)
						listbox.setSelectedItem(elem);
					
					select();
					retrySearch = false;
				}
				
				else
				{
					if ((listbox.getModel().getSize() == 0) && !retrySearch)
					{
						retrySearch = true;
						search();
					}
					
					else
					{
						esquema.tancaDetalls(); //amaguem dades..
						retrySearch = false;
					}
				}
				
				checkTruncatedList(listbox);
			}
			
			void showAltres () 
			{
				if (view_altres == false)
				{
//					esquema.getFellow("queryWindow").setHeight(queryWindowMax); 
					esquema.getFellow("queryWindow").getFellow("queryWindowAltres").setVisible(true);
					esquema.getFellow("queryWindow").getFellow("img_altres").setSrc("~./img/fletxa-baix.gif");
					view_altres = true;
				}
				else
				{
//					esquema.getFellow("queryWindow").setHeight(queryWindowMin); 
					esquema.getFellow("queryWindow").getFellow("queryWindowAltres").setVisible(false);
					esquema.getFellow("queryWindow").getFellow("img_altres").setSrc("~./img/fletxa.gif");
					view_altres = false;
				}
			}
			
			void select () 
			{
				if (esquema.getFellow("lista").getFellow("listbox").selectedItem != null && 
					esquema.getFellow("lista").getFellow("listbox").selectedItem.value != null)
					{
						populateDetails ();
						showDetall ();
						verificaControlAcces ();
					}
			}
			
			void showLista ()  
			{
				esquema.getFellow("lista").getFellow("listbox").clearSelection();
				esquema.getFellow("lista").getFellow("listbox").setRows(fileres);
			}
			
			void showDetall () 
			{
				esquema.hideCriteris();
				esquema.getFellow("lista").getFellow("listbox").setRows(5);
				esquema.getFellow("dades").getFellow("form").getFellow("missatge").setVisible(false);
				esquema.showFormulari();
			}
			
			void creaNou()
			{
				setVisibleControlAcces(false);
				setVisibleAttributeMapping(false);
				setVisibleMetadata(false);
				showDetall();
			}
			
			void xifra(Textbox camp)
			{
				Missatgebox.confirmaOK_CANCEL(org.zkoss.util.resource.Labels.getLabel("agents.Xifrar"),
					org.zkoss.util.resource.Labels.getLabel("agents.Xifrar2"),
					new EventListener() {
						public void onEvent(Event evt) {
							if ("onOK".equals(evt.getName())) {
								valor = camp.getValue();
								xifrat = new es.caib.seycon.Password(valor).toString(); 
								camp.setValue(xifrat);
							}
						}
					}
				);
			}
			
			void verificaControlAcces() {
				// l'amaguem per defecte
				setVisibleControlAcces(false);
				
				// si no pot veure el control d'accés sortim
				if (!canQueryAccessControlAgent) return;
				
				// Ací obtenim el nom de l'agent per veure la seua classe
				Object elem = esquema.getFellow("lista").getFellow("listbox").selectedItem.value;
				if (elem instanceof es.caib.zkib.datamodel.xml.XmlDataNode) {
					Object obj = elem.getInstance();
					if (obj instanceof es.caib.seycon.ng.comu.Dispatcher) {
						es.caib.seycon.ng.comu.Dispatcher agent = (es.caib.seycon.ng.comu.Dispatcher) obj;
						String nomClass = agent.getNomCla();
						String codiAgent = agent.getCodi();
						model.getVariables().declareVariable("codiAgent", codiAgent);
						try {
							// Mostramos o no el control d'accés segons el plugin
							cacActiu = model.getJXPathContext().getValue("/plugin[className='"+nomClass+"']/enableAccessControl");
							//Missatgebox.info ("cacActiu= "+cacActiu);
							if (cacActiu!=null && cacActiu) { //es boolea
								setVisibleControlAcces(true); 
								carregaControlAcces();
							}
						}
						
						catch (Throwable th) {
							//Missatgebox.error ("error "+th.getMessage());
							setVisibleControlAcces(false);
						}
						
						if (agent.getNomCla().equals("com.soffid.iam.addons.replica.agent.ReplicaAgent"))
							esquema.getFellow("lista").getFellow("delete_box").setVisible(false);
						
						else
							esquema.getFellow("lista").getFellow("delete_box").setVisible(true);
					}
				}
			}
			
			void setVisibleControlAcces(boolean visible) {
				if (visible == false && esquema.getFellow("dades").getFellow("r_controlAcces").isSelected())
					esquema.getFellow("dades").getFellow("r_basica").setSelected(true);
				esquema.getFellow("dades").getFellow("r_controlAcces").setVisible(visible);
			}
			
			void setVisibleAttributeMapping(boolean visible) {
				if (visible == false && esquema.getFellow("dades").getFellow("r_attributeMapping").isSelected())
					esquema.getFellow("dades").getFellow("r_basica").setSelected(true);
				esquema.getFellow("dades").getFellow("r_attributeMapping").setVisible(visible);
			}
			
			void setVisibleMetadata(boolean visible) {
				if (visible == false && esquema.getFellow("dades").getFellow("r_metadata").isSelected())
					esquema.getFellow("dades").getFellow("r_basica").setSelected(true);
				esquema.getFellow("dades").getFellow("r_metadata").setVisible(visible);
			}
			
			void carregaControlAcces() {
				model.getJXPathContext().getValue("/agent/controlAcces").refresh();
				gridControlAccess.dataPath = "/esquema/lista/listbox:/controlAcces"; 
			}
			
			void propagaCanvisAgent_Usuaris()  {
				Object elem = esquema.getFellow("lista").getFellow("listbox").selectedItem.value;
				if (elem instanceof es.caib.zkib.datamodel.xml.XmlDataNode) {
					Missatgebox.confirmaOK_CANCEL(org.zkoss.util.resource.Labels.getLabel("agents.Usuaris"),
						org.zkoss.util.resource.Labels.getLabel("agents.PropagarUsuaris"),
						new EventListener() {
							public void onEvent(Event evt) {
								if ("onOK".equals(evt.getName())) { 
									Object obj = elem.getInstance();
									if (obj instanceof es.caib.seycon.ng.comu.Dispatcher) {
										es.caib.seycon.ng.comu.Dispatcher agent = (es.caib.seycon.ng.comu.Dispatcher) obj;
										String codiAgent = agent.getCodi();
										es.caib.seycon.ng.servei.ejb.DispatcherService disService =
												es.caib.seycon.ng.EJBLocator.getDispatcherService();
										disService.propagateUsuarisDispatcher(codiAgent);
									}
								}
							}
						}
					);
				}
				
				else {
					Missatgebox.avis (org.zkoss.util.resource.Labels.getLabel("agents.Select"));
				}
			}
			
			void propagaCanvisAgent_Rols()  {
				Object elem = esquema.getFellow("lista").getFellow("listbox").selectedItem.value;
				if (elem instanceof es.caib.zkib.datamodel.xml.XmlDataNode) {
					Missatgebox.confirmaOK_CANCEL(org.zkoss.util.resource.Labels.getLabel("agents.Rols"),
						org.zkoss.util.resource.Labels.getLabel("agents.PropagarRols"),
						new EventListener() {
							public void onEvent(Event evt) {
								if ("onOK".equals(evt.getName())) { 
									Object obj = elem.getInstance();
									if (obj instanceof es.caib.seycon.ng.comu.Dispatcher) {
										es.caib.seycon.ng.comu.Dispatcher agent = (es.caib.seycon.ng.comu.Dispatcher) obj;
										String codiAgent = agent.getCodi(); 
										es.caib.seycon.ng.servei.ejb.DispatcherService disServiceR =
												es.caib.seycon.ng.EJBLocator.getDispatcherService();
										disServiceR.propagateRolsDispatcher(codiAgent);
									}
								}
							}
						}
					);
				}
				
				else {
					Missatgebox.avis (org.zkoss.util.resource.Labels.getLabel("agents.Select"));
				}
			}
			
			void propagaCanvisAgent_Groups()  {
				Object elem = esquema.getFellow("lista").getFellow("listbox").selectedItem.value;
				if (elem instanceof es.caib.zkib.datamodel.xml.XmlDataNode) {
					Missatgebox.confirmaOK_CANCEL(org.zkoss.util.resource.Labels.getLabel("agents.Groups"),
						org.zkoss.util.resource.Labels.getLabel("agents.PropagaGroups"),
						new EventListener() {
							public void onEvent(Event evt) {
								if ("onOK".equals(evt.getName())) { 
									Object obj = elem.getInstance();
									if (obj instanceof es.caib.seycon.ng.comu.Dispatcher) {
										es.caib.seycon.ng.comu.Dispatcher agent = (es.caib.seycon.ng.comu.Dispatcher) obj;
										String codiAgent = agent.getCodi(); 
										es.caib.seycon.ng.servei.ejb.DispatcherService disServiceR =
												es.caib.seycon.ng.EJBLocator.getDispatcherService();
										disServiceR.propagateDispatcherGroups(codiAgent);
									}
								}
							}
						}
					);
				}
				
				else {
					Missatgebox.avis (org.zkoss.util.resource.Labels.getLabel("agents.Select"));
				}
			}
			

			import es.caib.seycon.ng.comu.TipusUsuari;
			void seleccionaTipusUsuari ( String relacioLaboral) {
				String [] tipusUsuari  = null;
				if (relacioLaboral!=null)  tipusUsuari= relacioLaboral.split(",");
				if (tipusUsuari!=null) {
					List fills = lbTipusUsuari.getChildren();
					if (fills!=null) for (int i=0; i < fills.size(); i++)  {
						Listitem elem = fills.get(i);
						if (elem.getValue()!=null && elem.getValue().getInstance() instanceof TipusUsuari) {
							TipusUsuari tu = (TipusUsuari) elem.getValue().getInstance();
							for (int j=0; j < tipusUsuari.length; j++) {
								if (tipusUsuari[j]!=null && tipusUsuari[j].equals(tu.getCodi())) {
									elem.setSelected(true);
								}
							}
						}
					}
				}
			}
			
			void checkPropagateChanges()
			{
				DataListbox listbox = esquema.getFellow("lista").getFellow("listbox");
				
				if ((listbox.selectedItem != null) &&
						(listbox.selectedItem.getValue() != null))
				{
					if (Missatgebox.confirmaOK_CANCEL(
								org.zkoss.util.resource.Labels.getLabel("agents.DeleteAgentAccounts"),
								org.zkoss.util.resource.Labels.getLabel("process.warning")) &&
							Missatgebox.confirmaOK_CANCEL(
								org.zkoss.util.resource.Labels.getLabel("agents.DeleteAgentRoles"),
								org.zkoss.util.resource.Labels.getLabel("process.warning")))
					{
						listbox.delete();
					}
				}
			}
		]]>
	</zscript>

	<toolbar id="toolbar1" sclass="toolbar fixedToolbar">
		<hbox>
			<commitbutton datamodel="/model" />
			<undobutton datamodel="/model"
				listbox="/esquema/lista/listbox"
				onClick="setVisibleControlAcces(false); setVisibleAttributeMapping(false); setVisibleMetadata(false);" />
		</hbox>
	</toolbar>
	
	<esquemavertical id="esquema" datamodel="/model" focusCriteri="queryCodi"
		onHideFormulari="showLista()">
	
		<criteris id="queryWindow" onOK="search()"
			width="${amplaria}">

			<hbox style="margin-bottom:1px">
				<input_criteri id="queryCodi" etiqueta="${c:l('agents.zul.Codi')}"/>
				<hbox width="320px" widths="99px,200px,*">
					<input_etiqueta value="${c:l('agents.zul.Tipus')}" width="100%"/>
					<listbox id="queryNomLlista" dataPath="/model:/pluginNames"
						mold="select" style="font-size:11px;width:100%">
						<dataitem bind=".">
							<listcell bind="@description"/>
						</dataitem>
					</listbox>
					<separator/>
				</hbox>
				<input_criteri id="queryNom" etiqueta="${c:l('agents.zul.Classe')}"/>
				<separator width="10px"/>
				<imageclic onClick="search()" src="~./img/fletxa_cerca.gif"/>
			</hbox>
			<hbox> 
				<input_criteri id="queryUrl" etiqueta="${c:l('agents.zul.Url')}"/>
				<hbox widths="99px,*">
					<input_etiqueta value="${c:l('agents.zul.Actiu?')}" width="100%"/>
					<checkbox id="queryActiu"
						label="${c:l('agents.zul.Mostranomasagentsact')}" checked="true"/>
				</hbox>
			</hbox>
		</criteris>
		
		<navegador id="lista" width="${amplaria}">
			<toolbar id="toolbar2">
				<hbox>
					<insertbutton acces="${canCreateAgent}" listbox="/esquema/lista/listbox"
						onClick="creaNou()"/>
					<hbox id="delete_box">
						<imageclic id="imgDelete" if="${canDeleteAgent}"
							src="~./img/list-remove.gif" onClick="checkPropagateChanges()"/>
						<label value="${c:l('agents.DeleteAgent')}" 
							style="font-family: Arial; font-size: 11px; font-weight: bold; color: #FFF; cursor: pointer"
							onClick="checkPropagateChanges()"/>
					</hbox>
					<commitbutton datamodel="/model" />
					<undobutton datamodel="/model" listbox="/esquema/lista/listbox"
						onClick="setVisibleControlAcces(false); setVisibleAttributeMapping(false); setVisibleMetadata(false);"/>
					<listexporttoolbarbutton acces="${canQueryAgent}"
						listbox="/esquema/lista/listbox"/>
				</hbox>
			</toolbar>
			<script><![CDATA[
				floatingToolbar.setToolbar ( ${toolbar2.uuid });
				floatingToolbar.setFloatingToolbar ( ${toolbar1.uuid });
			]]>
			</script>
			
			<listbox id="listbox" autocommit="false" dataPath="/model:/agent"
				fixedLayout="true" height="96%" onClick="showDetall()" 
				onSelect="select()" rows="${fileres}" onCreate="checkTruncatedList(self)">
				<listhead>
					<listheader label="${c:l('agents.zul.Codi-2')}" sort="auto"
						width="21%"/>
					<listheader label="${c:l('agents.zul.Classe-2')}" sort="auto"
						width="43%"/>
					<listheader label="${c:l('agents.zul.Url-2')}" sort="auto"
						width="36%"/>
				</listhead>
				
				<listfoot>
					<listfooter span="3">
						<label id="listboxFoot" style="margin-left: 10px;" />
					</listfooter>
				</listfoot>
				
				<dataitem bind=".">
					<listcell bind="@codi"/>
					<listcell bind="@nomCla"/>
					<listcell bind="@url"/>
				</dataitem>
			</listbox>
		</navegador>
		
		<detalls id="dades" width="${amplaria}">
			<zscript>
				<![CDATA[
					es.caib.zkib.component.DataModel dm = model;
					dm.addEventListener("onCommit", new org.zkoss.zk.ui.event.EventListener ()
					{
						public void onEvent(Event event) {
							onChangeClass();
						}
					});
					void onChangeDades()
					{
						onEnableManualAccount();
						try {
							ds = form.getDataSource(); 
							es.caib.zkib.jxpath.JXPathContext ctx =  ds.getJXPathContext(); 
							registre = ctx.getValue("/");
							form.getFellow("detall_codi").getFellow("dada").setDisabled(!registre.isNew());
							Listbox lbTipusUsuari = form.getFellow("lbTipusUsuari");
							lbTipusUsuari.selectItem(null); //esborrem seleccio
							
							// Agent existent:
							if (!registre.isNew()) 
							{
								// Cargamos los checkboxes del tipo de usuario
								String relacioLaboral = ctx.getValue("@relacioLaboral");
								seleccionaTipusUsuari(relacioLaboral);	
								String url = esquema.getFellow("dades").getFellow("form").getFellow("basica")
										.getFellow("detall_url").getSelectedItem().getValue();
								if(url.trim().length() == 0)
								{
									esquema.getFellow("dades").getFellow("form").getFellow("basica")
									.getFellow("imgPropaga").setDisabled(true);
								}
								else
								{
									esquema.getFellow("dades").getFellow("form").getFellow("basica")
									.getFellow("imgPropaga").setDisabled(false);
								}
							} 
						
							String taskMode = com.soffid.iam.utils.ConfigurationCache.getProperty("soffid.task.mode");
							if (taskMode == null || "auto".equals(taskMode))
							{
								serverStatusRow.setVisible(true);
								serverStatusMessage.setValue( org.zkoss.util.resource.Labels.getLabel("parametres.zul.mode.auto") );
							}
							else
								serverStatusRow.setVisible(false);

							// Task status
							displayTasksStatus ();
						} catch (Exception e) {
							e.printStackTrace();
							form.getFellow("detall_codi").getFellow("dada").setDisabled(true);
							//Missatgebox.error ("Error "+e.getMessage());
						}
					}
					
					void displayTasksStatus () {
						for (String type: new String[] { "reconcile", "import", "impact"} ) {
							String task = XPathUtils.getValue(form, "tasks[1]/"+type+"Task/name");
							Boolean active = XPathUtils.getValue(form, "tasks[1]/"+type+"Task/active");
							Boolean error =  XPathUtils.getValue(form, "tasks[1]/"+type+"Task/error");
							java.util.Calendar last1 = XPathUtils.getValue(form, "tasks[1]/"+type+"Task/lastExecution");
							java.util.Calendar last2 = XPathUtils.getValue(form, "tasks[1]/"+type+"Task/lastEnd");
							statusComponent = form.getFellow (type+"Status");
							lastComponent = form.getFellow (type+"Last");
							labelComponent = form.getFellow (type+"Label");
							
							if ( active != null && active.booleanValue())
							{
								statusComponent.setVisible(true);
								statusComponent.setSrc("/img/wait.gif");
								lastComponent.setVisible(true);
								lastComponent.setValue(last1.getTime());
								labelComponent.setVisible(true);
							}
							else if ( error != null && error.booleanValue())
							{
								statusComponent.setVisible(true);
								statusComponent.setSrc ("/img/semafor-vermell.png");
								lastComponent.setVisible(true);
								lastComponent.setValue(last1.getTime());
								labelComponent.setVisible(true);
							}
							else if ( error != null && last2 != null)
							{
								statusComponent.setSrc ("/img/semafor-verd.png");
								statusComponent.setVisible(true);
								lastComponent.setVisible(true);
								lastComponent.setValue(last2.getTime());
								labelComponent.setVisible(true);
							}
							else 
							{
								statusComponent.setVisible(false);
								lastComponent.setVisible(false);
								labelComponent.setVisible(false);
							}
						}
					}
					
					void refreshTasks () {
						try {
							es.caib.zkib.datamodel.DataNodeCollection coll = XPathUtils.getValue(form, "tasks");
							if (coll != null)
							{
								coll .refresh();
								displayTasksStatus();
							}
						} catch (Exception e) {
							refreshTasksTimer.stop();
						}
					}
					
					void onEnableManualAccount ()
					{
						if (detall_manual.isChecked())
						{
							rols_row.setVisible(false);
							r_tipusUsuari.setVisible(false);
							groups_row.setVisible(false);
							//userdomain_row.setVisible(false);
						}
						else
						{
							rols_row.setVisible(true);
							r_tipusUsuari.setVisible(true);
							groups_row.setVisible(true);
							//userdomain_row.setVisible(true);
						}
					}
					
					
					void onChangeClass() {
						//System.out.println("On change class");
						String value=detall_nom.getValue();
						es.caib.zkib.jxpath.JXPathContext ctx = model.getJXPathContext ();
						row_authoritative.visible = false; 
						boolean isReplica = false;
						if (value==null || "".equals(value)) 
						{
							customAgentProperties.visible = false;
						}
						else
						{
							customAgentProperties.getChildren().clear ();
							try {
								auth = ctx.getValue("/plugin[className='"+value+"']/@authoritativeSource");
								row_authoritative.visible = auth != null && auth; 
							}
							
							catch (Exception e) { 
								row_authoritative.visible = false; 
							}
							
							try {
								data = ctx.getValue("/plugin[className='"+value+"']/userInterface");
								
								//System.out.println("AgentDescriptor = "+data.getClass().getName());
								defaultAgentProperties.visible = false;
								java.io.ByteArrayInputStream in = new java.io.ByteArrayInputStream(data);
								xmlDoc = new org.zkoss.idom.input.SAXBuilder(false, false).build(in);
								Executions.createComponentsDirectly(xmlDoc, "zul", customAgentProperties, new java.util.HashMap());
								customAgentProperties.visible = true;
								enable = ctx.getValue("/plugin[className='"+value+"']/@enableAttributeMapping");
								agentId = XPathUtils.getValue(
										XPathUtils.getComponentContext(form), "@id");
								setVisibleAttributeMapping (agentId != null && enable);
								setVisibleMetadata (agentId != null && enable);
							}
							
							catch (Exception e) {
							    e.printStackTrace();
								defaultAgentProperties.visible = false;
								//Missatgebox.error("error "+e.getMessage());
								//System.out.println("Sin descriptor");
								customAgentProperties.visible = false;
							}
							
							try {
								isReplica = form.getJXPathContext().getValue("@databaseReplicaId") != null;
							} 
							catch (es.caib.zkib.jxpath.JXPathNotFoundException e) {	}
						}
						
						detall_url.setDisabled(isReplica);
						detall_url2.setDisabled(isReplica);
						detall_segur.setDisabled (isReplica);
						detall_readonly.setDisabled(isReplica);
						detall_basatRols.setDisabled(isReplica);
						select_group.setDisabled(isReplica);
						grups.getFellow("dada").setReadonly(isReplica);
						cbDominiUsuaris.setDisabled(isReplica);
						cbDominiContrasenyes.setDisabled(isReplica);
						r_tipusUsuari.setVisible(!isReplica && ! detall_manual.isChecked());
						cbClassDescription.setDisabled(isReplica);
					}
					
					void hideTestRow (Event event)
					{
						Component c = event.getTarget();
						c.getFellow("testRowLabel1").setVisible(false);						
						c.getFellow("testRowLabel2").setVisible(false);						
						c.getFellow("testRowTextbox1").setVisible(false);						
						c.getFellow("testRowTextbox2").setVisible(false);						
						c.getFellow("testRowButton1").setVisible(true);
						c.getFellow("testRowButton2").setVisible(false);						
						c.getFellow("testRowButton3").setVisible(false);						
						c.getFellow("testRowButton4").setVisible(false);						
						c.getFellow("testRowButton5").setVisible(false);						
					}
					
					void selectObjectType (Event event)
					{
						
					}
					
					void createObjectTypes (Event event)
					{
						
					}
					
					void displayTestRow (Event event)
					{
						Component c = event.getTarget();
						es.caib.seycon.ng.comu.SoffidObjectType type = XPathUtils.getValue(c, "@soffidObject");
						c.getFellow("testRowLabel1").setVisible(true);
						c.getFellow("testRowTextbox1").setVisible(true);						
						c.getFellow("testRowTextbox1").setValue("");						
						c.getFellow("testRowTextbox2").setValue("");						
						c.getFellow("testRowButton1").setVisible(false);
						c.getFellow("testRowButton2").setVisible(true);						
						c.getFellow("testRowButton3").setVisible(true);						
						c.getFellow("testRowButton4").setVisible(true);						
						c.getFellow("testRowButton5").setVisible(true);						
						if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_ACCOUNT))
						{
							c.getFellow("testRowLabel1").setValue("Account: ");
							c.getFellow("testRowLabel2").setVisible(false);						
							c.getFellow("testRowTextbox2").setVisible(false);						
						}
						else if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_ALL_GRANTED_GROUP) ||
								type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_GRANTED_GROUP))
						{
							c.getFellow("testRowLabel1").setValue("Account: ");
							c.getFellow("testRowLabel2").setValue("Group: ");
							c.getFellow("testRowLabel2").setVisible(true);						
							c.getFellow("testRowTextbox2").setVisible(true);						
						}
						else if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_ALL_GRANTED_ROLES) ||
								type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_GRANTED_ROLE))
						{
							c.getFellow("testRowLabel1").setValue("Account: ");
							c.getFellow("testRowLabel2").setValue("Role: ");
							c.getFellow("testRowLabel2").setVisible(true);						
							c.getFellow("testRowTextbox2").setVisible(true);						
						}
						else if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_GRANT))
						{
							c.getFellow("testRowLabel1").setValue("Account: ");
							c.getFellow("testRowLabel2").setValue("Role / Group: ");
							c.getFellow("testRowLabel2").setVisible(true);						
							c.getFellow("testRowTextbox2").setVisible(true);						
						}
						else if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_GROUP))
						{
							c.getFellow("testRowLabel1").setValue("Group: ");
							c.getFellow("testRowLabel2").setVisible(false);						
							c.getFellow("testRowTextbox2").setVisible(false);						
						}
						else if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_MAIL_LIST))
						{
							c.getFellow("testRowLabel1").setValue("Name: ");
							c.getFellow("testRowLabel2").setValue("Domain: ");
							c.getFellow("testRowLabel2").setVisible(true);						
							c.getFellow("testRowTextbox2").setVisible(true);						
						}
						else if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_ROLE))
						{
							c.getFellow("testRowLabel1").setValue("Role: ");
							c.getFellow("testRowLabel2").setVisible(false);						
							c.getFellow("testRowTextbox2").setVisible(false);						
						}
						else if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_USER))
						{
							c.getFellow("testRowLabel1").setValue("User: ");
							c.getFellow("testRowLabel2").setVisible(false);
							c.getFellow("testRowTextbox2").setVisible(false);						
						}
						else if (type.equals(es.caib.seycon.ng.comu.SoffidObjectType.OBJECT_CUSTOM))
						{
							String t = XPathUtils.getValue(c, "@soffidCustomObject");
							c.getFellow("testRowLabel1").setValue("Object type: ");
							c.getFellow("testRowTextbox1").setValue (t); 
							c.getFellow("testRowLabel2").setVisible(true);						
							c.getFellow("testRowTextbox2").setVisible(true);						
							c.getFellow("testRowLabel2").setValue("Object name: ");						
							c.getFellow("testRowTextbox2").focus(); 
						}
						else
						{
							c.getFellow("testRowLabel1").setVisible(false);
							c.getFellow("testRowTextbox1").setVisible(false);						
							c.getFellow("testRowButton2").setVisible(false);						
							c.getFellow("testRowButton3").setVisible(false);						
							c.getFellow("testRowButton4").setVisible(true);						
							c.getFellow("testRowButton5").setVisible(true);						
						}
					}
					
					void testRowTextbox1OK(Event event)
					{
						Textbox tb2 = event.getTarget().getFellow("testRowTextbox2");
						if (tb2.isVisible())
							tb2.focus();
						else
							doTest (event);
					}
					
					void doTest (Event event)
					{
						Grid g = event.getTarget().getFellow ("attributesGrid");
						HashMap map = new HashMap();
						for ( Row r: g.getRows().getChildren())
						{
							Listbox lb = r.getChildren().get(2);
							es.caib.seycon.ng.comu.AttributeDirection dir = lb.getSelectedItem().getValue();
							if (dir == es.caib.seycon.ng.comu.AttributeDirection.INPUTOUTPUT ||
									dir == es.caib.seycon.ng.comu.AttributeDirection.OUTPUT)
							{
								Textbox sys = r.getChildren().get(0);
								Textbox soff = r.getChildren().get(3);
								map.put (sys.getValue(), soff.getValue());
							}
						}
						es.caib.seycon.ng.servei.ejb.DispatcherService svc = es.caib.seycon.ng.EJBLocator.getDispatcherService();
						String o1 = g.getFellow("testRowTextbox1").getValue();
						if (o1 == null || o1.trim().length() == 0)
							o1 = "-";
						String o2 = g.getFellow("testRowTextbox2").getValue();
						if (o2 == null || o2.trim().length() == 0)
							o2 = "-";
						map = svc.testObjectMapping(map,
								XPathUtils.getValue(g, "../../@codi"),
								XPathUtils.getValue(g, "../@soffidObject"),
								o1, o2);
						g.getFellow("testColumn").setVisible(true);
						for ( Row r: g.getRows().getChildren())
						{
							Textbox sys = r.getChildren().get(0);
							Listbox direction = r.getChildren().get(2);
							Div rdiv = r.getChildren().get(5);
							Label result = rdiv.getFirstChild();
							es.caib.zkib.zkiblaf.ImageClic image = rdiv.getLastChild();
							Object obj = map.get(sys.getValue());
							if (direction.getSelectedItem() == null ||
									direction.getSelectedIndex() == 0 )
							{
								result.setValue("");
								image.setVisible(false);
							}
							else if (obj == null)
							{
								result.setValue("");
								image.setVisible(false);
							}
							else if (obj instanceof Exception)
							{
								result.setValue("");
								image.setVisible(true);
								if (obj instanceof es.caib.seycon.ng.exception.InternalErrorException)
									image.setTitle(((Exception)obj).getMessage());
								else
									image.setTitle(obj.toString());
							}
							else
							{
								
								result.setValue(stringify(obj, ""));
								image.setVisible(false);
							}
						}
					}

					
					String stringify (Object obj, String indent)
					{
						if (obj == null) return "";
						
						if (obj instanceof java.util.Calendar)
						{
							return new java.text.SimpleDateFormat(org.zkoss.util.resource.Labels.getLabel("selfService.Format"))
									.format(obj.getTime());
						}
						if (obj instanceof java.util.Date)
						{
							return new java.text.SimpleDateFormat(org.zkoss.util.resource.Labels.getLabel("selfService.Format"))
									.format(obj);
						}
						if (obj instanceof java.util.Collection)
						{
							String r = "";
							for ( Object obj2 : obj) {
								if (r.isEmpty()) r = "[";
								else r = r + ",\n"+indent;
								r = r + stringify(obj2, indent+"  ");
							}
							return r + "]";
						}
						if (obj instanceof java.util.Map)
						{
							String r = "";
							for ( Object k : obj.keySet()) {
								if (r.isEmpty()) r = "{";
								else r = r + ", ";
								r = r + stringify(k, indent+" ") + ": "+stringify (obj.get(k), indent+"  ");
							}
							return r + "}";
						}
						if (obj.getClass().isArray())
						{
							String r = "";
							for ( Object obj2 : obj) {
								if (r.isEmpty()) r = "[";
								else r = r + ",\n"+indent;
								r = r + stringify(obj2, indent+"  ");
							}
							return r + "]";
						}
						String s = obj.toString();
						if (s.length() > 150) s = s.substring(0, 145)+" ...";
						return s;
					}

					void doLoadTest (Event event)
					{
						if (esquema.isCommitPending()) {
							Missatgebox.avis (org.zkoss.util.resource.Labels
								.getLabel("agents.Avis"),
								org.zkoss.util.resource.Labels.getLabel("agents.Canvis"));
							return;
						}
						Grid g = event.getTarget().getFellow ("attributesGrid");
						es.caib.seycon.ng.servei.ejb.DispatcherService svc = es.caib.seycon.ng.EJBLocator.getDispatcherService();
						String o1 = g.getFellow("testRowTextbox1").getValue();
						if (o1 == null || o1.trim().length() == 0)
							o1 = "-";
						String o2 = g.getFellow("testRowTextbox2").getValue();
						if (o2 == null || o2.trim().length() == 0)
							o2 = "-";
						com.soffid.iam.sync.engine.intf.GetObjectResults result = svc.getSoffidObject(
								XPathUtils.getValue(g, "../../@codi"),
								XPathUtils.getValue(g, "../@soffidObject"),
								o1, o2);
						map = result.getObject();
						if (map == null)
						{
							es.caib.zkib.zkiblaf.Missatgebox.avis(org.zkoss.util.resource.Labels.getLabel("agents.zul.notFound"));
							return;
						}
						Component c = Path.getComponent("//objectAttributes/objectAttributesWindow");
						for (String key: map.keySet())
						{
							map.put(key, stringify(map.get(key), ""));
						}
						Events.postEvent("onStart", c, new Object[]{
								o1,
								result
						});
					}

					void doQueryTest (Event event)
					{
						Grid g = event.getTarget().getFellow ("attributesGrid");
						es.caib.seycon.ng.servei.ejb.DispatcherService svc = es.caib.seycon.ng.EJBLocator.getDispatcherService();
						String o1 = g.getFellow("testRowTextbox1").getValue();
						if (o1 == null || o1.trim().length() == 0)
							o1 = "-";
						String o2 = g.getFellow("testRowTextbox2").getValue();
						if (o2 == null || o2.trim().length() == 0)
							o2 = "-";
						com.soffid.iam.sync.engine.intf.GetObjectResults result = svc.getNativeObject(
								XPathUtils.getValue(g, "../../@codi"),
								XPathUtils.getValue(g, "../@soffidObject"),
								o1, o2);
						map = result.getObject();
						if (map == null)
						{
							es.caib.zkib.zkiblaf.Missatgebox.avis(org.zkoss.util.resource.Labels.getLabel("agents.zul.notFound"));
							return;
						}
						Component c = Path.getComponent("//objectAttributes/objectAttributesWindow");
						for (String key: map.keySet())
						{
							map.put(key, stringify(map.get(key), ""));
						}
						Events.postEvent("onStart", c, new Object[]{
								o1,
								result
						});
					}

					void doFullTest (Event event)
					{
						Component g = event.getTarget();
						if (esquema.isCommitPending()) {
							Missatgebox.avis (org.zkoss.util.resource.Labels
								.getLabel("agents.Avis"),
								org.zkoss.util.resource.Labels.getLabel("agents.Canvis"));
							return;
						}
						es.caib.seycon.ng.servei.ejb.DispatcherService svc = es.caib.seycon.ng.EJBLocator.getDispatcherService();
						String o1 = g.getFellow("testRowTextbox1").getValue();
						if (o1 == null || o1.trim().length() == 0)
							o1 = "-";
						String o2 = g.getFellow("testRowTextbox2").getValue();
						if (o2 == null || o2.trim().length() == 0)
							o2 = "-";
						com.soffid.iam.sync.engine.intf.DebugTaskResults r = svc.testPropagateObject(
								XPathUtils.getValue(g, "../@codi"),
								XPathUtils.getValue(g, "@soffidObject"),
								o1, o2);
						testWindow.getFellow("status").setValue(r.getStatus());
						testWindow.getFellow("log").setValue(r.getLog());
						testWindow.doHighlighted();
					}
						
					void showTaskMessage (String type)
					{
						String ref = es.caib.zkib.datasource.XPathUtils.getValue(form, "tasks[1]/"+type+"/@logReferenceID");
						Long id = es.caib.zkib.datasource.XPathUtils.getValue(form, "tasks[1]/"+type+"/@id");
						for ( com.soffid.iam.api.ScheduledTask t: com.soffid.iam.EJBLocator.getScheduledTaskService().listTasks())
						{
							if (t.getId().equals ( id ))
							{
								ref = t.getLogReferenceID();
							}
						}
						if (ref == null)
							return;
						String name = es.caib.zkib.datasource.XPathUtils.getValue(form, "tasks[1]/"+type+"/@name");
						com.soffid.iam.doc.service.ejb.DocumentService doc = es.caib.seycon.ng.EJBLocator.getDocumentService();
						doc.openDocument(new com.soffid.iam.doc.api.DocumentReference(ref));
						java.io.InputStream in = new com.soffid.iam.doc.api.DocumentInputStream(doc);
						byte[] b = new byte[8000];
						int read = in.read(b);
						in.close();
						
						if (read == b.length)
						{                              
							Filedownload.save(new com.soffid.iam.doc.api.DocumentInputStream(doc),
									"text/plain; charset=utf-8",
									name+".txt");
						}
						else if (read <= 0)
						{
							logWindow.setTitle(name);
							logWindow.getFellow("tb").value = "";
							logWindow.doHighlighted();
						}
						else
						{
							logWindow.setTitle(name);
							logWindow.getFellow("tb").value = new String(b, 0, read);
							logWindow.doHighlighted();
						}
						
						
					}

					void startTask(String type)
					{
						com.soffid.iam.api.ScheduledTask task = es.caib.zkib.datasource.XPathUtils.getValue(form, "tasks[1]/"+type);
						
						com.soffid.iam.EJBLocator.getScheduledTaskService().startNow (task);
						
						Thread.currentThread().sleep(2000);
						
						es.caib.zkib.datasource.XPathUtils.getValue(form, "tasks").refresh();

						onChangeDades();
					}

				]]>
			</zscript>
			
			<form id="form" dataPath="/esquema/lista/listbox:/."
				onChangeXPath="onChangeDades()" width="100%">
				<attribute name="onActualitza">
					if (event.getData() instanceof String) {
						dada = (String)event.getData();
					} else {
						dada = (String)(event.getData()[0]);
					}
					camp = (DataTextbox) form.getFellow("grups").getFellow("dada");
					String oldValue= camp.getValue();
					if(oldValue == null || oldValue.trim().compareTo("") == 0){
						oldValue = null;
					}
					<!-- Va afegint els grups separats per comes -->
					camp.setValue((oldValue == null ? "" : oldValue + ", ") + dada);
				</attribute>
				<timer delay="20000" onTimer="refreshTasks()" id="refreshTasksTimer" running="false" repeats="true" />
				<tabbox id="panels" width="100%">
				<attribute name="onSelect">
				<![CDATA[
				         	if (panels.getSelectedTab() == r_tasksTab)
				         	{
				         		refreshTasks();
				         		refreshTasksTimer.start();
				         	}
				         	else
				         		refreshTasksTimer.stop();
				]]>
				</attribute>
				<tabs>
					<tab id="r_basica" label="${c:l('agents.zul.Informaciabasica')}"/>
					<tab id="r_attributeMapping" label="${c:l('agents.zul.AttributeMapping')}"/>
					<tab id="r_reconcileTriggers" label="${c:l('agents.loadTriggers')}"/>
					<tab label="${c:l('agents.zul.MassiveActions')}" if="${canPropagateAgentUsers or canPropagateAgentRoles or canPropagateAgentGroups}" id ="r_tasksTab"/>
					<tab id="r_controlAcces" label="${c:l('agents.zul.Controldaccas')}"/>
					<tab id="r_metadata" label="${c:l('agents.zul.accountMetadata')}"/>
				</tabs>
				<tabpanels>
					<tabpanel id="basica" width="100%">
					<vbox width="100%">
					<grid width="99%" sclass="noBorderGrid">
					<columns visible="false"><column width="14%"/><column/> </columns>
						<rows>
							<row id="serverStatusRow">
								<label style="color:#8A4700" value="${c:l('parametres.zul.taskMode') }:"/>
								<label style="color:#8A4700" value="" id="serverStatusMessage"/>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Codi-2')}"/>
								<hbox width="100%">
									<input_dada bind="@codi" id="detall_codi" maxim="50"
										width_custom="99%" mascara="no empty"/>
										
									<label value="*" />
								</hbox>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Descripcion') }"/>
								<hbox width="100%">
									<hbox width="100%">
										<input_dada bind="@description" id="detall_description" maxim="250" width_custom="88%"/>
									</hbox>
								</hbox>
							</row>
							
							<row>
								<input_etiqueta value="${c:l('agents.zul.Tipus-2')}"/>
								<hbox width="90%" widths="45%,*" style="padding-top: 6px; padding-bottom: 6px">
									<combobox bind="@nomCla" dataPath="/model:/plugin"  id="cbClassDescription"
										style="border: 1px solid #AAB; margin-top: 5px; margin-bottom: 5px; padding: 4px"
										onChange="onChangeClass();" readonly="true" width="96%">
										<datacomboitem bind="@className" labelBind="@description"/>
									</combobox>
									
									<label value="*"/>
									
									<hbox width="98%" widths="*,80%">
										<label sclass="etiqueta" value="${c:l('agents.zul.Classe')}"/>
										<textbox bind="@nomCla" disabled="true" id="detall_nom" onChangeXPath="onChangeClass();" readonly="true" width="98%"/>
									</hbox>
								</hbox>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Server')}"/>
								<div width="90%">
									<div>
										<listbox
											disabled="${!canModifyAgent}"
											width="40%"
											bind="@url" mold="select"
											dataPath="/model:/serverSelector"
											id="detall_url"
											style="margin-right: 2em">
											<dataitem bind="@url">
												<listcell bind="@nom"/>
											</dataitem>
										</listbox>
										<label value=" ${c:l('agents.zul.sharedThread')}:" />
										<checkbox bind="@sharedDispatcher" onCheck=""/>
									</div>
									<listbox
										disabled="${!canModifyAgent}"
										width="40%"
										bind="@url2" mold="select"
										dataPath="/model:/serverSelector"
										id="detall_url2"
										style="margin-right: 2em">
										<dataitem bind="@url">
											<listcell bind="@nom"/>
										</dataitem>
									</listbox>
								</div>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.timeout')}"/>
								<div width="90%">
									<intbox bind="@timeout" readonly="${!canModifyAgent}" sclass="textbox" width="10em" style="margin-right: 2em" onChange=""/>
									<label value=" ${c:l('agents.zul.longTimeout')}:" />
									<intbox bind="@longTimeout" readonly="${!canModifyAgent}" sclass="textbox" width="10em" onChange=""/>
								</div>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Fiable')}"/>
								<checkbox bind="@segur" disabled="${!canModifyAgent}" id="detall_segur" onCheck=""/>
							</row>
							<row id="row_authoritative">
								<input_etiqueta value="${c:l('agents.zul.Authoritative')}"/>
								<div style="inline-block">
									<checkbox bind="@authoritative" disabled="${!canModifyAgent}" id="detall_authoritative" onCheck=""/>
									<listbox mold="select" dataPath="/model:/authoritativeProcess" disabled="${!canModifyAgent}"  bind="@authoritativeProcess">
										<dataitem bind="@value"><listcell bind="@tag"></listcell></dataitem>
									</listbox>
								</div>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Readonly')}"/>
								<checkbox bind="@readOnly" disabled="${!canModifyAgent}" id="detall_readonly" onCheck=""/>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.ManualAccountCreation')}"/>
								<checkbox bind="@manualAccountCreation" disabled="${!canModifyAgent}" id="detall_manual" 
									onCheck="onEnableManualAccount(); missatge.setVisible(true);"/>
							</row>
							<row id="rols_row">
								<input_etiqueta value="${c:l('agents.zul.Basatenrols')}"/>
								<checkbox bind="@basRol" disabled="${!canModifyAgent}" id="detall_basatRols" 
									onCheck="missatge.setVisible(true);"/>
							</row>
							<row id="groups_row">
								<input_etiqueta value="${c:l('agents.zul.Grups')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@grups" id="grups" lectura="${!canModifyAgent}" width_custom="98%"
										onChange="missatge.setVisible(true);"/>
									<imageclic id="select_group" src="~./img/grup.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												desktop.getPage("grupsLlista").setAttribute("tipus","");
												desktop.getPage("grupsLlista").setAttribute("llistaObsolets",false);
												Events.postEvent("onInicia",desktop.getPage("grupsLlista").getFellow("esquemaLlista"),form);
											}
										</attribute>
									</imageclic>				
								</hbox>		
							</row>
							<row id="userdomain_row">
								<input_etiqueta value="${c:l('agents.zul.Dominidusuaris')}"/>
								<hbox width="50%" widths="*,*">
									<listbox mold="select" bind="@dominiUsuaris" dataPath="/model:/dominisUsuari" id="cbDominiUsuaris" width="90%"
										onSelect="missatge.setVisible(true);">
										<dataitem bind="@codi">
											<listcell bind="@descripcio"/>
										</dataitem>
									</listbox>
									
									<label value="*"/>
								</hbox>
							</row>
							
							<row>
								<input_etiqueta value="${c:l('agents.zul.DominideContrasenyes')}"/>
								<hbox width="50%" widths="*,*">
									<listbox mold="select" bind="@dominiContrasenyes" dataPath="/model:/dominisContrasenya" 
										id="cbDominiContrasenyes" width="90%">
										<dataitem bind="@codi">
											<listcell bind="@descripcio"/>
										</dataitem>
									</listbox>
									
									<label value="*"/>
								</hbox>
							</row>
							
							<row id="r_tipusUsuari">
								<input_etiqueta value="${c:l('agents.zul.Tipusdusuari')}"/>
								<hbox>  
									<listbox checkmark="true" dataPath="/model:/tipusUsuari" id="lbTipusUsuari" multiple="true">
										<attribute name="onSelect">
											missatge.setVisible(true);
											// no es pot saber quin és el darrer que ha seleccionat... els agafem tots
											elements = self.getSelectedItems(); // de Listitem
											String tipusUsuariSeleccionats = "";
											int numSel = 0;
											if (elements!=null) for (Iterator it=elements.iterator(); it.hasNext(); ) {
												Listitem li = it.next();
												if (li.getValue() instanceof XmlDataNode) {
													tipusUsuariSeleccionats +=li.getValue().getInstance().getCodi()+",";
													numSel++;
												}
											}
											//Missatgebox.info ("tipus d'usuaris seleccionats "+tipusUsuariSeleccionats);
											// Ho guardem
											ds = form.getDataSource(); 
											es.caib.zkib.jxpath.JXPathContext ctx =  ds.getJXPathContext();
											// Obtenim el valor anterior
											tipusAnterior = ctx.getValue("@relacioLaboral");
											boolean confirma = false;
											String[] tu = null;
											if (tipusAnterior!=null) {
												tu = tipusAnterior.split(",");
												// només quan es canvien de més de 2 a 1
												if (tu!=null @and tu.length @gt 2 @and numSel == 1) {
													confirma = true;
												}
											}
											if (confirma @and tu!=null) {
												if (Missatgebox.confirmaOK_CANCEL(String.format(org.zkoss.util.resource.Labels.getLabel("agents.CanviarTipusUsuari"), new Object [] {tu.length,numSel}),
													org.zkoss.util.resource.Labels.getLabel("agents.VerificarCanviarTipusUsuari"))) {
														ctx.setValue("@relacioLaboral",tipusUsuariSeleccionats);		
												} else {
													//Posem el canvi
													seleccionaTipusUsuari(tipusAnterior);
												}
											} else {
												//No demanem confirmació
												ctx.setValue("@relacioLaboral",tipusUsuariSeleccionats);
											}
											
										</attribute>
										<dataitem bind=".">
											<listcellnolabel bind="@codi">
												<textbox bind="@descripcio" readonly="true" style="border: none;padding 4px 1px;"/>
											</listcellnolabel>
										</dataitem>
									</listbox>
									<!--label id="lb_tipusUsuari" bind="@relacioLaboral"/--> 
									<div id="missatge" visible="false">
										<label value="${c:l('agents.zul.AlertSpreadUsers')}" style="color:red;"/>
										<button label="${c:l('rules.preview')}">
											<attribute name="onClick">
												es.caib.seycon.ng.comu.Dispatcher d = form.getJXPathContext().getValue("/").getInstance();
												es.caib.seycon.ng.servei.ejb.DispatcherService svc =
													es.caib.seycon.ng.EJBLocator.getDispatcherService();
												String file = svc.generateChangesReport(d);
												previewWindow.getFellow("previewDiv").setSrc(file);
												previewWindow.doHighlighted();
											</attribute>
										</button>
									</div>
								</hbox>		
							</row>
						</rows>
					</grid>
					<label sclass="etiqueta" value="${c:l('agents.zul.Parametresdelagent')}" width="100%"/>
					<vbox id="defaultAgentProperties" width="100%" visible="false">
						<grid width="99%" sclass="noBorderGrid">
						<columns visible="false"><column width="14%"/><column/> </columns>
						<rows>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre0')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param0" id="detall_par0" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											 if (canModifyAgent) {
												xifra(form.getFellow("detall_par0").getFellow("dada"));										
											}
										</attribute>
									</imageclic>							
								</hbox>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre1')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param1" id="detall_par1" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par1").getFellow("dada"));										
											}
										</attribute>
									</imageclic>							
								</hbox>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre2')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param2" id="detall_par2" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par2").getFellow("dada"));										
											}
										</attribute>
									</imageclic>							
								</hbox>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre3')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param3" id="detall_par3" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par3").getFellow("dada"));										
											}
										</attribute>
									</imageclic>							
								</hbox>
							</row>						
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre4')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param4" id="detall_par4" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par4").getFellow("dada"));
											}
										</attribute>
									</imageclic>							
								</hbox>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre5')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param5" id="detall_par5" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par5").getFellow("dada"));
											}
										</attribute>
									</imageclic>							
								</hbox>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre6')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param6" id="detall_par6" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par6").getFellow("dada"));
											}
										</attribute>
									</imageclic>							
								</hbox>
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre7')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param7" id="detall_par7" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par7").getFellow("dada"));
											}
										</attribute>
									</imageclic>							
								</hbox>							
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre8')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param8" id="detall_par8" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par8").getFellow("dada"));
											}
										</attribute>
									</imageclic>							
								</hbox>							
							</row>
							<row>
								<input_etiqueta value="${c:l('agents.zul.Parametre9')}"/>
								<hbox widths="90%,10%">
									<input_dada bind="@param9" id="detall_par9" lectura="${!canModifyAgent}" width_custom="98%"/>
									<imageclic src="~./img/xifrar.gif">
										<attribute name="onClick">
											if (canModifyAgent) {
												xifra(form.getFellow("detall_par9").getFellow("dada"));
											}
										</attribute>
									</imageclic>							
								</hbox>							
							</row>
						</rows>
					</grid>
					</vbox>
					<vbox id="customAgentProperties" visible="false" width="100%"/>
					</vbox>
					</tabpanel>
					<tabpanel id="tabAttributeMapping">
					
					
						<toolbar>
							<toolbarbutton image="/img/refresca.png" label="Create default mapping">
								<attribute name="onClick"><![CDATA[
	if (canUpdateAgent)
	{
								Missatgebox.confirmaOK_CANCEL(
										org.zkoss.util.resource.Labels.getLabel("agents.resetMappings"),
											org.zkoss.util.resource.Labels.getLabel("agents.reset"),
										new EventListener() {
											public void onEvent(Event evt) {
												if ("onOK".equals(evt.getName())) {
						   							es.caib.zkib.datasource.DataSource listbox = new Path("/esquema/lista/listbox").getComponent();
						   							listbox.commit();
													Long id = XPathUtils.getValue(listbox, "/@id");
													es.caib.seycon.ng.servei.ejb.DispatcherService ejb =
															es.caib.seycon.ng.EJBLocator.getDispatcherService();
													ejb.setDefaultMappingsByDispatcher(id);
													XPathUtils.getValue(listbox, "/objectMapping").refresh();
												}														
											}
										}
						   			);
	}
								]]>
								</attribute>
							</toolbarbutton>
							<toolbarbutton image="~./img/exporta.gif" label="Export">
								<attribute name="onClick">
									<![CDATA[
	es.caib.zkib.datasource.DataSource listbox = new Path("/esquema/lista/listbox").getComponent();
	String t = new com.soffid.iam.web.agent.Exporter().export (listbox);
	org.zkoss.util.media.AMedia m = new org.zkoss.util.media.AMedia("agent-config.xml",
			null, "text/xml", t.getBytes("UTF-8"));
	Filedownload.save(m);
									]]>
								</attribute>
							</toolbarbutton>
							<toolbarbutton image="/img/upload.png" label="Import">
								<attribute name="onClick">
									<![CDATA[
{
	org.zkoss.util.media.Media m = Fileupload.get();
	es.caib.zkib.datasource.DataSource listbox = new Path("/esquema/lista/listbox").getComponent();
	new com.soffid.iam.web.agent.Importer().doImport(m, listbox);
	listbox.sendEvent( new es.caib.zkib.events.XPathRerunEvent( listbox, "/" ) );
}
									]]>
								</attribute>
							</toolbarbutton>
						</toolbar>
						<grid dataPath="/esquema/lista/listbox:/objectMapping" id="objectsGrid" width="100%" fixedLayout="false">
							<attribute name="onNewRow"><![CDATA[
      						String value=detall_nom.getValue();
      						es.caib.zkib.jxpath.JXPathContext ctx = model.getJXPathContext ();
      						Row r = event.getData();
      						Div  triggersBlock = r.getFirstChild().getFellow("triggersBlock"); 

      						try {
   								auth = ctx.getValue("/plugin[className='"+value+"']/@enableObjectTriggers");
   								triggersBlock.visible = auth != null && auth; 
   							}
   							catch (Exception e) { 
   								triggersBlock.visible = false; 
   							}

							]]></attribute>
							<columns>
								<column label="System objects" valign="top">
								</column>
								<column label="" width="2em"  valign="top">
									<insertbutton acces="${canCreateAgent}" listbox="/esquema/dades/objectsGrid" label="">
										<attribute name="onClick"><![CDATA[
			if (canUpdateAgent)
			{
										es.caib.zkib.datasource.DataSource listbox = new Path("/esquema/lista/listbox").getComponent();							                                   
										XPathUtils.createPath(listbox, "/objectMapping");
			}							                                   
										]]>
										</attribute>
									</insertbutton>
								</column>
							</columns>
							<datarow>
								<window width="95%" >
									<div>
										<input_dada bind="@systemObject" width_custom ="15%"></input_dada>
										<label value="based on" width="10%"></label>
										<listbox use="com.soffid.iam.web.agent.CustomTypeListbox"
											bind="." 
											mold="select" 
											width="15%"/>
									</div>
	
										
									<div style="width: 90%; float: right; display:block; ">
									
										<div style="display: block; ">
	
										<image src="~./zul/img/tree/close.png" width="16px" style="float: left; ">
											<attribute name="onClick">
												propertiesDiv = event.target.getFellow("propertiesDiv");
												if (propertiesDiv.isVisible() )
												{
													propertiesDiv.setVisible(false);
													propertiesLabel.setVisible(true);
													self.src = "~./zul/img/tree/close.png";
												} else {
													propertiesDiv.setVisible(true);
													propertiesLabel.setVisible(false);
													self.src = "~./zul/img/tree/open.png";
												}
											</attribute>
										</image>
										
										<div id="propertiesLabel" style="height: 20px;" >
											<label value="Properties" />
										</div>
																					
										<div style="" id="propertiesDiv"  visible="false" >																				
											<grid sclass="noBorderGrid" style="display: inline-block" dataPath="property" width="95%"  fixedLayout="true" id ="propertiesGrid">
												<columns>
													<column label="Property" width = "15em">
													</column>
													<column label="Value">
													</column>
													<column label="" width="2em">
														<imageclic align="right" src="~./img/list-add.gif">
															<attribute name="onClick"><![CDATA[
								if (canUpdateAgent)
								{
															es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext(event.target);							                                   
															XPathUtils.createPath(bindCtx.getDataSource(), bindCtx.getXPath());
								}
															]]>
															</attribute>
														</imageclic>
													</column>
												</columns>
												<datarow>
													<input_dada bind="@property" width_custom ="95%"></input_dada>
													<textbox bind="@value" width ="95%" onChange="" style="display:block; resize: vertical"  multiline="true"  height="1em">
															<attribute name="onFocus"><![CDATA[
			  String v = self.getValue();
			  if (v.length() > 50 || v.indexOf ('\n') >= 0)
			  {
				  self.setMultiline(true);
				  self.setHeight("5em");
			  }
			
															]]></attribute>
													</textbox>
													<imageclic align="right" src="~./img/list-remove.gif">
														<attribute name="onClick">
															<![CDATA[
				if (canUpdateAgent)
				{
							es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext (event.target);
							XPathUtils.removePath (bindCtx.getDataSource(), bindCtx.getXPath());
				}												]]>
														</attribute>
													</imageclic>
												</datarow>
											</grid>
											<div style="height: 20px;" />
										</div>
									</div>
									
									<div style="display: block">
	
										<image src="~./zul/img/tree/close.png" style="float: left;" 
											id="openAttributesIcon" >
											<attribute name="onClick"><![CDATA[
												attributesDiv = event.target.getFellow("attributesDiv");
												String objectType = XPathUtils.getValue(event.getTarget(), "@systemObject"); 
												if (attributesDiv.isVisible() )
												{
													pageScope.put("attributes-div-"+objectType, "false");
													attributesDiv.setVisible(false);
													attributesLabel.setVisible(true);
													event.target.src = "~./zul/img/tree/close.png";
												} else {
													pageScope.put("attributes-div-"+objectType, "true");
													attributesDiv.setVisible(true);
													attributesLabel.setVisible(false);
													event.target.src = "~./zul/img/tree/open.png";
												}
											]]></attribute>
										</image>
	
										<div id="attributesLabel" style="height: 20px;" >
											<label value="Attributes" sclass=""/>
										</div>
																					
																															
										<div style="" id="attributesDiv"  visible="false">																				
											<grid sclass="noBorderGrid" dataPath="attributeMapping" id="attributesGrid" style="display: inline-block; width: 95%">
												<columns>
													<column label="System attribute">
													</column>
													<column width="2em"/>
													<column label="Direction" width="6em">
													</column>
													<column label="Soffid attribute">
													</column>
													<column width="2em"/>
													<column label="Test result" id="testColumn" visible="false">
													</column>
													<column label="" width="2em">
														<imageclic  align="right" src="~./img/list-add.gif">
															<attribute name="onClick"><![CDATA[
								if (canUpdateAgent)
								{
															es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext(event.target);							                                   
															XPathUtils.createPath(bindCtx.getDataSource(), bindCtx.getXPath());
								}														                                   
															]]>
															</attribute>
														</imageclic>
													</column>
												</columns>
												<datarow>
													<textbox bind="@systemAttribute" width ="100%" onOK="" onChange="" style="display:block; resize: none" multiline="true" height="1em">
															<attribute name="onFocus"><![CDATA[
			  String v = self.getValue();
			  if (v.length() > 50 || v.indexOf ('\n') >= 0)
			  {
				  self.setMultiline(true);
				  self.setHeight("5em");
			  }
			
															]]></attribute>
													</textbox>
													<imageclic style="display:table-cell" src="/img/pencil.png" width="2em" >
														<attribute name="onClick"><![CDATA[
														    Events.sendEvent(new Event ("onEdit", 
														    		desktop.getPage("editor").getFellow("top"),
														    		new Object[] {
																		    event.getTarget().getPreviousSibling(),
																		    new com.soffid.iam.web.agent.ScriptEnviroment().getSystemVars(self)
																	}
														    ));
														]]></attribute>
													</imageclic>
													<listbox bind="@direction" mold="select" dataPath="/model:/attributeDirection">
														<dataitem bind="@value">
															<listcell bind="@literal"/>
														</dataitem>
													</listbox>
													<textbox bind="@soffidAttribute" width ="100%" onChange=""  style="display:block; resize: none" multiline="true"  height="1em">
															<attribute name="onFocus"><![CDATA[
			  String v = self.getValue();
			  if (v.length() > 50 || v.indexOf ('\n') >= 0)
			  {
				  self.setMultiline(true);
				  self.setHeight("5em");
			  }
			
															]]></attribute>
													</textbox>
													<imageclic style="display:table-cell" src="/img/pencil.png" width="2em" >
														<attribute name="onClick"><![CDATA[
														    Events.sendEvent(new Event ("onEdit", 
														    		desktop.getPage("editor").getFellow("top"),
														    		new Object[] {
																		    event.getTarget().getPreviousSibling(),
																		    new com.soffid.iam.web.agent.ScriptEnviroment().getSoffidVars(self)
																	}
														    ));
														]]></attribute>
													</imageclic>
													<div>
														<label multiline="true"/>
														<imageclic src="/img/exclamation.png" visible="false"/>
													</div>
													<imageclic align="right" src="~./img/list-remove.gif">
														<attribute name="onClick">
															<![CDATA[
						es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext (event.target);
						XPathUtils.removePath (bindCtx.getDataSource(), bindCtx.getXPath());
															]]>
														</attribute>
													</imageclic>
												</datarow>
											</grid>
											<div id="testRow" style="margin-left: 18px">
												<button id="testRowButton1" label="Test" onClick="displayTestRow(event)"/>
												<label id="testRowLabel1" visible="false"/>
												<textbox id="testRowTextbox1" visible="false" onOK="testRowTextbox1OK(event)"/>
												<label id="testRowLabel2" style="margin-left: 2em" visible="false"/>
												<textbox id="testRowTextbox2" visible="false" onOK="doTest(event)"/>
												<button id="testRowButton2" label="${c:l('agents.zul.TestExpression') }" 
												onClick="doTest(event)" visible="false"/>
												<button id="testRowButton3" label="${c:l('agents.zul.TestFull') }" 
													onClick="doFullTest(event)" visible="false"/>
												<button id="testRowButton4" label="${c:l('agents.zul.TestQuery') }"
													onClick="doQueryTest(event)" visible="false"/>
												<button id="testRowButton5" label="${c:l('agents.zul.TestLoad') }" 
													onClick="doLoadTest(event)" visible="false"/>
											</div>
											<div style="height: 20px;" />
										</div>
									</div>

<!--  TRIGGERS -->
									<div style="display: block" id="triggersBlock">
	
										<image src="~./zul/img/tree/close.png" style="float: left;" >
											<attribute name="onClick">
												Div triggersDiv = event.target.getFellow("triggersDiv");
												Div triggersLabel = event.target.getFellow("triggersLabel");
												if (triggersDiv.isVisible() )
												{
													triggersDiv.setVisible(false);
													triggersLabel.setVisible(true);
													self.src = "~./zul/img/tree/close.png";
												} else {
													triggersDiv.setVisible(true);
													triggersDiv.invalidate();
													triggersLabel.setVisible(false);
													self.src = "~./zul/img/tree/open.png";
												}
											</attribute>
										</image>
	
										<div id="triggersLabel" style="height: 20px;" >
											<label value="Triggers" sclass=""/>
										</div>
																					
																															
										<div style="" id="triggersDiv"  visible="false">	
											<grid sclass="noBorderGrid" dataPath="objectMappingTrigger" fixedLayout="false" id="triggersGrid" style="width: 95%; display:inline-block">
												<columns>
													<column label="Trigger" width="15em" valign="top">
													</column>
													<column label="Script" >
													</column>
													<column label="" width="2em"/>
													<column label="" width="2em">
														<imageclic  align="right" src="~./img/list-add.gif">
															<attribute name="onClick"><![CDATA[
								if (canUpdateAgent)
								{
															es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext(event.target);							                                   
															XPathUtils.createPath(bindCtx.getDataSource(), bindCtx.getXPath());
								}														                                   
															]]>
															</attribute>
														</imageclic>
													</column>
												</columns>
												<datarow>
													<listbox bind="@trigger" mold="select" dataPath="/model:/soffidObjectTrigger" style="vertical-align: top;">
														<dataitem bind="@value">
															<listcell bind="@literal"/>
														</dataitem>
													</listbox>
													<textbox bind="@script" width ="100%" onOK="" onChange="" style="display:block; resize: none" multiline="true" height="1em">
															<attribute name="onFocus"><![CDATA[
			  String v = self.getValue();
			  if (v.length() > 50 || v.indexOf ('\n') >= 0)
			  {
				  self.setMultiline(true);
				  self.setHeight("5em");
			  }
			
															]]></attribute>
													</textbox>
													<imageclic style="display:table-cell" src="/img/pencil.png" width="2em" >
														<attribute name="onClick"><![CDATA[
														    Events.sendEvent(new Event ("onEdit", 
														    		desktop.getPage("editor").getFellow("top"),
														    		new Object[] {
																		    event.getTarget().getPreviousSibling(),
																		    new com.soffid.iam.web.agent.ScriptEnviroment().getTriggerVars(self)
																	}
														    ));
														]]></attribute>
													</imageclic>
													<imageclic align="right" src="~./img/list-remove.gif">
														<attribute name="onClick">
															<![CDATA[
						es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext ((Component) event.target);
						XPathUtils.removePath (bindCtx.getDataSource(), bindCtx.getXPath());
															]]>
														</attribute>
													</imageclic>
												</datarow>
											</grid>
											<div style="height: 20px;" />
										</div>
									</div>

									<div style="width: 15px; height: 15px;"/>
									</div>
								</window>
								<imageclic align="right" src="~./img/list-remove.gif">
									<attribute name="onClick">
										<![CDATA[
	                                  if (canUpdateAgent) 
	                                  {
										es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext (event.target);
										XPathUtils.removePath (bindCtx.getDataSource(), bindCtx.getXPath());
	                                  }
										]]>
									</attribute>
								</imageclic>
							</datarow>
						</grid>
					</tabpanel>

					<!--  Reconcile triggers -->

					<tabpanel id="tabReconcileTriggers">
						<div style="margin-bottom: 32px">
							<checkbox bind="@fullReconciliation" disabled="${!canModifyAgent}" label="${c:l('agents.zul.fullReconcile') }" onCheck=""/>
							<input_etiqueta value="${c:l('agents.zul.fullReconcile2')}" style="display:block; width: 100%"/>
						</div>
						<div style="margin-bottom: 32px">
							<checkbox bind="@generateTasksOnLoad" disabled="${!canModifyAgent}" label="${c:l('agents.zul.generateTasksOnLoad') }" onCheck=""/>
							<input_etiqueta value="${c:l('agents.zul.generateTasksOnLoad2')}" style="display:block; width: 100%"/>
						</div>
					
						<grid dataPath="/esquema/lista/listbox:/reconcileTrigger" width="100%" fixedLayout="false">
							<columns>
								<column label="Object" width="15em" valign="top">
								</column>
								<column label="Trigger" width="15em" valign="top">
								</column>
								<column label="Script" >
								</column>
								<column label="" width="2em">
									<imageclic  align="right" src="~./img/list-add.gif">
										<attribute name="onClick"><![CDATA[
								if (canUpdateAgent)
								{
															es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext(event.target);							                                   
															XPathUtils.createPath(bindCtx.getDataSource(), bindCtx.getXPath());
								}														                                   
										]]>
										</attribute>
									</imageclic>
								</column>
							</columns>
							<datarow height="7em">
							
								<listbox bind="@objectType" mold="select" dataPath="/model:/soffidObjectTypeTrigger" >
									<dataitem bind="@value">
										<listcell bind="@literal"/>
									</dataitem>
								</listbox>

								<listbox bind="@trigger" mold="select" dataPath="/model:/soffidObjectTrigger" 
									style="vertical-align: top;">
									<dataitem bind="@value">
										<listcell bind="@literal"/>
									</dataitem>
								</listbox>
								<div style="min-height:6em: padding-left: 0; padding-right: 0;display:table; width: 100%">
									<div style="min-height:6em: width:100%; padding: 4px ;display:table-cell">
										<textbox multiline="true" rows="5"  
												style="display:block; resize: none"
												width="100%" 
												onChange="" 
												height="5em" bind="@script" >
										</textbox>
									</div>
									<div style="width:3em; padding: 4px ;display:table-cell;">
										<imageclic style="display:table-cell" src="/img/pencil.png" width="2em" >
											<attribute name="onClick"><![CDATA[
											    Events.sendEvent(new Event ("onEdit", 
											    		desktop.getPage("editor").getFellow("top"),
											    		new Object[] {
															    event.getTarget().getParent().getPreviousSibling().getFirstChild(),
															    new com.soffid.iam.web.agent.ScriptEnviroment().getLoadTriggerVars(self)
														}
											    ));
											]]></attribute>
										</imageclic>
									</div>
								</div>
								<imageclic align="right" src="~./img/list-remove.gif" width="2em">
									<attribute name="onClick">
										<![CDATA[
	es.caib.zkib.binder.BindContext bindCtx = XPathUtils.getComponentContext ((Component) event.target);
	XPathUtils.removePath (bindCtx.getDataSource(), bindCtx.getXPath());
										]]>
									</attribute>
								</imageclic>
							</datarow>
						</grid>
					</tabpanel>
			
					<tabpanel if="${canPropagateAgentUsers or canPropagateAgentRoles or canPropagateAgentGroups}">
						<vbox>
							<button image="/img/propagausu.gif" label="${c:l('agents.PropagaUsuaris')}"
									id="imgPropaga" if="${canPropagateAgentUsers}" > 
								<attribute name="onClick">
									<![CDATA[
										if (canPropagateAgentUsers)
										{
											propagaCanvisAgent_Usuaris();
										}
									]]>
								</attribute>
							</button>
							<space width="4px"/>
							<button id="imgPropagaRols" if="${canPropagateAgentRoles}" image="/img/propagarols.gif" label="${c:l('agents.PropagaRols')}"> 
								<attribute name="onClick">
								 	if (canPropagateAgentRoles) {
										propagaCanvisAgent_Rols();
									}
								</attribute>
							</button>
							<space width="4px"/>
							<button id="imgPropagaGroups" if="${canPropagateAgentGroups}" image="/img/propagagroup.png" label="${c:l('agents.PropagaGroups')}"> 
								<attribute name="onClick">
								 	if (canPropagateAgentGroups) {
										propagaCanvisAgent_Groups();
									}
								</attribute>
							</button>
							<space width="4px"/>
							<div>
								<button if="${canPropagateAgentUsers}" label="${c:l('agents.zul.reconcile')}"> 
									<attribute name="onClick">
										startTask("reconcileTask");
									</attribute>
								</button>
								<label value="Last run:" id="reconcileLabel"/> 
								<datebox id="reconcileLast" buttonVisible="false" disabled="true" format="${c:l('selfService.Format') }"></datebox>
								<image visible="false" id="reconcileStatus" style="vertical-align: middle; cursor: pointer; height: 32px" onClick='showTaskMessage("reconcileTask")'/>
							</div>
							<space width="4px"/>
							<div>
								<button if="${canPropagateAgentUsers}" label="${c:l('agents.zul.loadAuhtoratitve')}"> 
									<attribute name="onClick">
										startTask("importTask");
									</attribute>
								</button>
								<label value="Last run:" id="importLabel"/> 
								<datebox id="importLast" buttonVisible="false" disabled="true" format="${c:l('selfService.Format') }"></datebox>
								<image visible="false" id="importStatus" style="vertical-align: middle; cursor: pointer; height: 32px" onClick='showTaskMessage("importTask")'/>
							</div>
							<space width="4px"/>
							<div>
								<button if="${canPropagateAgentUsers}" label="${c:l('agents.zul.impactAnalyis')}"> 
									<attribute name="onClick">
										startTask("impactTask");
									</attribute>
								</button>
								<label value="Last run:" id="impactLabel"/> 
								<datebox id="impactLast" buttonVisible="false" disabled="true" format="${c:l('selfService.Format') }"></datebox>
								<image visible="false" id="impactStatus" style="vertical-align: middle; cursor: pointer; height: 32px" onClick='showTaskMessage("impactTask")'/>
							</div>
						</vbox>
					</tabpanel>

					<tabpanel id="tabControlAcces">
					<vbox width="${amplaria2}">
						<checkbox bind="@controlAccess" disabled="${!canSetAccessControl}" id="c_controlAcces" label="${c:l('agents.zul.Activarcontroldacca')}" onCheck=""/>
						<listbox dataPath="/esquema/lista/listbox:/controlAcces" fixedLayout="true" height="300px" id="gridControlAccess" sclass="likeagrid" width="98%">
						<attribute name="onActualitza">
							// NOVA FILERA DE CONTROL D'ACCÉS
							dada = event.getData();
							// Datos: usuari, idUsuari, usuari_generic, rol, idRol, maquina, idMaquina, maquines_generic, programa, idFicticia
							//Missatgebox.info ("rebudes #"+dada.length+ " dades "+dada)
	            			modelProxy = (es.caib.zkib.binder.list.ModelProxy) gridControlAccess.getModel();
	            			ds = gridControlAccess.getDataSource(); 
	            			es.caib.zkib.jxpath.JXPathContext ctx =  ds.getJXPathContext();
	            			// codi dispatcher actual
	            			v_codi = model.getVariables().getVariable("codiAgent");
	            			// user: pot ésser usuari(idUsuari), usuari_generic o rol
	            			v_usuari = dada[0];
	            			v_idUsuari = dada[1];
	            			v_usuari_generic = dada[2];
	            			v_rol = dada[3];
	            			v_idRol = dada[4];
	            			// maquina: pot ésser maquina (idMaquina) o maquines_generic
	            			v_maquina = dada[5];
	            			v_idMaquina = dada[6];
	            			v_maquines_generic = dada[7];
	            			// programa
	            			v_programa = dada[8];
	            			// id ficiticia
	            			v_idCAC = dada[9];
	            			
	            			String condicio = "[@nomAgent = '"+v_codi+"'"; //no tanquem ]
	            			// user: pot ésser usuari(idUsuari), usuari_generic o rol
	            			/*if (v_idUsuari != null ) {
	            				condicio += " and @idUsuari='"+v_idUsuari+"' ";
	            			} else */
	            			if (v_idRol != null) {
	            				condicio += " and @idRol ='"+v_idRol+"' ";
	            			} else  {// genèric
	            				condicio += " and (@usuariGeneric = '"+v_usuari_generic+"') ";
	            				//" and (@usuariGeneric = '"+v_usuari_generic+"' or @codiUsuari = '"+v_usuari_generic+"') ";
							}
							// maquina: pot ésser maquina (idMaquina) o maquines_generic
							if (v_idMaquina!=null) {
								condicio += " and @idMaquina = '"+v_idMaquina+"' ";
							} else { // genèric (comparem amb el nom de la màquina)
								condicio += "and @nomMaquina = '"+v_maquines_generic+"' ";
								//" and @maquinaGeneric = '"+v_maquines_generic+"' ";
							}
							
							// programa
							condicio +=" and @program='"+v_programa+"']"; //tanquem ]
							
							//Missatgebox.info ("condicio =" +condicio);              			
	            			
	            			xpath = gridControlAccess.getXPath() + condicio;
	            			boolean jaExisteix = true;
	            			try {
	             				valor = ctx.getValue(xpath);
	            			} catch(Exception e) {
	             				jaExisteix = false;
	            			}
	            			if (jaExisteix) {
	            				Missatgebox.error (org.zkoss.util.resource.Labels.getLabel("agents.JaExisteix"));
	            				return;
	            			} else { // Creem un de nou
		              			position = modelProxy.newInstance();
		              			ds = gridControlAccess.getDataSource(); 
		              			ctx =  ds.getJXPathContext(); 
		              			xpath = gridControlAccess.getXPath() + modelProxy.getBind(position); 
		              			pointer =ctx.createPath (xpath);
		             			es.caib.zkib.jxpath.JXPathContext ctx2 = ctx.getRelativeContext(pointer);
		             			ctx2.setValue("@nomAgent", v_codi);
								// user: pot ésser usuari(idUsuari), usuari_generic o rol
		            			/*if (v_idUsuari != null ) { 
		            				ctx2.setValue("@codiUsuari", v_usuari);
		            				ctx2.setValue("@idUsuari", v_idUsuari);
		            			} else */
		            			if (v_idRol != null) {
		            				ctx2.setValue("@descripcioRol", v_rol);
		            				ctx2.setValue("@idRol", v_idRol);
		            			} else  {// genèric
		            				ctx2.setValue("@usuariGeneric", v_usuari_generic);
		            				//ctx2.setValue("@codiUsuari", v_usuari); // no té id serà genèric
								}
								// maquina: pot ésser maquina (idMaquina) o maquines_generic
								/*if (v_idMaquina!=null) {
		            				ctx2.setValue("@nomMaquina", v_maquina);
		            				ctx2.setValue("@idMaquina", v_idMaquina);
								} else { // genèric
								*/
									ctx2.setValue("@maquinaGeneric", v_maquines_generic);
									ctx2.setValue("@nomMaquina", v_maquina); // no té id serà genèric
								//}
								
								// programa
								ctx2.setValue("@program", v_programa);  
					            pointer.invalidate ();
					            
					            // id ficticia del CAC (per poder editar) -- no s'empra després
					            ctx2.setValue("@id", v_idCAC);
	            			}
							
						</attribute>
						<attribute name="onUpdate">
							dada = event.getData();
							// Datos: usuari, idUsuari, usuari_generic, rol, idRol, maquina, idMaquina, maquines_generic, programa, id (real o ficticia)
	            			modelProxy = (es.caib.zkib.binder.list.ModelProxy) gridControlAccess.getModel();
	            			ds = gridControlAccess.getDataSource(); 
	            			es.caib.zkib.jxpath.JXPathContext ctx =  ds.getJXPathContext();
	            			// codi dispatcher actual
	            			v_codi = model.getVariables().getVariable("codiAgent");
	            			// user: pot ésser usuari(idUsuari), usuari_generic o rol
	            			v_usuari = dada[0];
	            			v_idUsuari = dada[1];
	            			v_usuari_generic = dada[2];
	            			v_rol = dada[3];
	            			v_idRol = dada[4];
	            			// maquina: pot ésser maquina (idMaquina) o maquines_generic
	            			v_maquina = dada[5];
	            			v_idMaquina = dada[6];
	            			v_maquines_generic = dada[7];
	            			// programa
	            			v_programa = dada[8];
	            			// idCAC: real o ficticia
	            			v_idCAC = dada[9];
	            			//Missatgebox.info("dada "+dada);
	            			
	            			xpath = gridControlAccess.getXPath() + "[@id = '"+v_idCAC+"']";
	            			boolean jaExisteix = false;
	            			try {
	             				valor = ctx.getValue(xpath);
	             				jaExisteix = true;
	            			} catch(Exception e) {
	             				jaExisteix = false;
	            			}
	            			if (!jaExisteix) {
	            				Missatgebox.error (org.zkoss.util.resource.Labels.getLabel("agents.NoRegla"));
	            				return;
	            			} else { // Actualitzem
	            				pointer = ctx.getPointer(xpath);	
								es.caib.zkib.jxpath.JXPathContext ctx2 = ctx.getRelativeContext(pointer);
		             			ctx2.setValue("@nomAgent", v_codi);
								// user: pot ésser usuari(idUsuari), usuari_generic o rol
		            			/*if (v_idUsuari != null ) { 
		            				ctx2.setValue("@codiUsuari", v_usuari);
		            				ctx2.setValue("@idUsuari", v_idUsuari);
		            			} else */
		            			if (v_idRol != null) {
		            				ctx2.setValue("@descripcioRol", v_rol);
		            				ctx2.setValue("@idRol", v_idRol);
		            			} else  {// genèric
		            				ctx2.setValue("@usuariGeneric", v_usuari_generic);
		            				//ctx2.setValue("@codiUsuari", v_usuari); // no té id serà genèric
								}
								// maquina: pot ésser maquina (idMaquina) o maquines_generic
								/*if (v_idMaquina!=null) {
		            				ctx2.setValue("@nomMaquina", v_maquina);
		            				ctx2.setValue("@idMaquina", v_idMaquina);
								} else { // genèric
								*/
									ctx2.setValue("@maquinaGeneric", v_maquines_generic);
									ctx2.setValue("@nomMaquina", v_maquina); // no té id serà genèric
								//}
								
								// programa
								ctx2.setValue("@program", v_programa);
								// esborrem ips propagades
								ctx2.setValue("@ipsPropagades","");  
					            pointer.invalidate ();
	            			}
							
						</attribute>					
					<listhead>
						<listheader label="${c:l('agents.zul.Usuari')}" sort="auto" width="15%"/>
						<listheader label="${c:l('agents.zul.Rol')}" sort="auto" width="15%"/>
						<listheader label="${c:l('agents.zul.Maquina/IP')}" sort="auto" width="20%"/>
						<listheader label="${c:l('agents.zul.Programa')}" sort="auto" width="25%"/>
						<listheader label="${c:l('agents.zul.IPsPropagades')}" sort="auto" tooltiptext="${c:l('agents.IPsPropagades')}"/>
						<listheader id="c_gestionaRol" label="${c:l('agents.zul.*')}" sclass="tcoth" visible="${canModifyAccessControl}" width="30px"/>
						<listheader label="${c:l('agents.zul.')}" visible="${canDeleteAccessControlAgent}" width="30px"/>					
					</listhead>
					<dataitem bind=".">
						<listcell bind="@usuariGeneric"/>
						<listcell bind="@descripcioRol"/>
						<listcell bind="@nomMaquina"/>
						<listcell bind="@program"/>
						<listcell bind="@ipsPropagades"/>
						<listcell sclass="tcoth">
						<imageclic src="~./img/vincula.gif" tooltiptext="Modificar regla">
							<attribute name="onClick">
							<![CDATA[
								if (canModifyAccessControl) {
									listCell = self.getParent(); 
									dlistbox = listCell.getListbox(); 
									modelo = dlistbox.getModel();
									listItem = listCell.getParent(); 
									posicio = listItem.getIndex(); 
									elemPos = modelo.getElementAt(posicio); 
									xpath = elemPos.getDataContext().getXPath(); 
									ds = gridControlAccess.getDataSource();
									es.caib.zkib.jxpath.JXPathContext ctx = ds.getJXPathContext();																												
									
									// Guardem el id per poder moficiar la fila que correspon
									desktop.getPage("controlAcces").setAttribute("idCAC", ctx.getValue(xpath+"/@id"));
									desktop.getPage("controlAcces").setAttribute("usuariGeneric", ctx.getValue(xpath+"/@usuariGeneric"));
									desktop.getPage("controlAcces").setAttribute("idRol", ctx.getValue(xpath+"/@idRol"));
									desktop.getPage("controlAcces").setAttribute("descripcioRol", ctx.getValue(xpath+"/@descripcioRol"));
									desktop.getPage("controlAcces").setAttribute("nomMaquina", ctx.getValue(xpath+"/@nomMaquina"));
									desktop.getPage("controlAcces").setAttribute("idMaquina", ctx.getValue(xpath+"/@idMaquina"));
									desktop.getPage("controlAcces").setAttribute("maquinaGeneric", ctx.getValue(xpath+"/@maquinaGeneric"));
									desktop.getPage("controlAcces").setAttribute("programa", ctx.getValue(xpath+"/@program"));
									desktop.getPage("controlAcces").setAttribute("rol_bbdd", model.getVariables().getVariable("codiAgent"));
									Events.postEvent ("onIniciaUpdate",desktop.getPage("controlAcces").getFellow("esquemaLlista"),gridControlAccess);
								}
								
								]]>
							</attribute>														
						</imageclic>
						</listcell>					
						<listcell>
						<imageclic align="right" src="~./img/list-remove.gif">
							<attribute name="onClick">
								if (canDeleteAccessControlAgent) {
									listCell = self.getParent(); 
									dlistbox = listCell.getListbox(); 
									modelo = dlistbox.getModel();
									listItem = listCell.getParent(); 
									posicio = listItem.getIndex(); 
									elemPos = modelo.getElementAt(posicio); 
									xpath = elemPos.getDataContext().getXPath(); 
									dataSource = gridControlAccess.getDataSource();
									context = dataSource.getJXPathContext();
									c_usuari = context.getValue(xpath+"/@usuariGeneric");
									c_rol = context.getValue(xpath+"/@descripcioRol");
									c_program = context.getValue(xpath+"/@program");
									dada = c_usuari==null?c_rol:c_usuari;
									Missatgebox.confirmaOK_CANCEL(
										String.format(org.zkoss.util.resource.Labels.getLabel("agents.SegurEsborra"), new Object [] {dada,c_program}),
										org.zkoss.util.resource.Labels.getLabel("agents.Esborra"),
										new EventListener() {
											public void onEvent(Event evt) {
												if ("onOK".equals(evt.getName())) {
													context.removePath(xpath);
												}														
											}
										}
						   			);								
								}
							</attribute>														
						</imageclic>
						</listcell>					
					</dataitem>
					</listbox>
						<hbox width="98.5%">
						<zscript>
							int generaRandomNegatiu() {
							 	java.util.Random randomGenerator = new java.util.Random();
	   						    int randomInt = randomGenerator.nextInt(100000);
	   						    return -randomInt; //negatiu
							}
							boolean existeixCACId(int random) {
								// verifiquem que no existisca
								modelProxy = (es.caib.zkib.binder.list.ModelProxy) gridControlAccess.getModel();
								ds = gridControlAccess.getDataSource(); 
								es.caib.zkib.jxpath.JXPathContext ctx =  ds.getJXPathContext();
								xpath = gridControlAccess.getXPath() + "[@id="+random+"]";
								boolean jaExisteix = false;
								try {
	             					valor = ctx.getValue(xpath);
	             					jaExisteix = true;
	            				} catch(Throwable th) {
	             					jaExisteix = false; // ha de donar error (!!)
	            				}
	            				//Missatgebox.info("valor id "+random+" existeix? "+jaExisteix);
	            				return jaExisteix;	
	            									
							}
						
						</zscript>
						<div align="left">
						<hbox>
						<button disabled="${!canCreateAccessControlAgent}" image="~./img/list-add.gif" label="${c:l('agents.zul.Afegeixnou')}">
							<attribute name="onClick">	
								// NOVES fileres
								//Obtenim un número aleatori per al id nou de la filera
								int idRandom = generaRandomNegatiu(); 
								// iterem fins conseguir un id fictici q no existisca
								while (existeixCACId(idRandom)) {
									idRandom = generaRandomNegatiu();
								}
								// Guardem el valor del id fictici per a les noves fileres
								desktop.getPage("controlAcces").setAttribute("idCAC", idRandom);
								
								desktop.getPage("controlAcces").setAttribute("rol_bbdd",model.getVariables().getVariable("codiAgent"));
								Events.postEvent	("onInicia",desktop.getPage("controlAcces").getFellow("esquemaLlista"),gridControlAccess);
							</attribute>
						</button>
						<separator width="1px"/>
						<button disabled="${!canCreateAccessControlAgent}" image="~./img/copia.png" label="${c:l('agents.zul.Clonaregla')}">
							<attribute name="onClick">
							<![CDATA[
							    // Mirem si s'ha seleccionat una filera
							    Listitem sel = gridControlAccess.getSelectedItem();
							    if (sel==null)  {
							    	Missatgebox.error(org.zkoss.util.resource.Labels.getLabel("agents.SeleccionarRegla"));
							    	return;
							    }
							    
								dlistbox = gridControlAccess; 
								modelo = dlistbox.getModel();
								listItem = sel; 
								posicio = listItem.getIndex(); 
								elemPos = modelo.getElementAt(posicio); 
								xpath = elemPos.getDataContext().getXPath(); 
								ds = gridControlAccess.getDataSource();
								es.caib.zkib.jxpath.JXPathContext ctx = ds.getJXPathContext();																												
							    
								// copia de la filera seleccionada
								desktop.getPage("controlAcces").setAttribute("usuariGeneric", ctx.getValue(xpath+"/@usuariGeneric"));
								desktop.getPage("controlAcces").setAttribute("idRol", ctx.getValue(xpath+"/@idRol"));
								desktop.getPage("controlAcces").setAttribute("descripcioRol", ctx.getValue(xpath+"/@descripcioRol"));
								desktop.getPage("controlAcces").setAttribute("nomMaquina", ctx.getValue(xpath+"/@nomMaquina"));
								desktop.getPage("controlAcces").setAttribute("idMaquina", ctx.getValue(xpath+"/@idMaquina"));
								desktop.getPage("controlAcces").setAttribute("maquinaGeneric", ctx.getValue(xpath+"/@maquinaGeneric"));
								desktop.getPage("controlAcces").setAttribute("programa", ctx.getValue(xpath+"/@program"));
								desktop.getPage("controlAcces").setAttribute("rol_bbdd", model.getVariables().getVariable("codiAgent"));
								
								//NOVES fileres (còpia d'altra filera)
								//Obtenim un número aleatori per al id nou de la filera
								int idRandom = generaRandomNegatiu(); 
								// iterem fins conseguir un id fictici q no existisca
								while (existeixCACId(idRandom)) {
									idRandom = generaRandomNegatiu();
								}
								
								// Guardem el valor del id fictici per a les noves fileres
								desktop.getPage("controlAcces").setAttribute("idCAC", idRandom);
								
								Events.postEvent	("onIniciaClon",desktop.getPage("controlAcces").getFellow("esquemaLlista"),gridControlAccess);
								]]>
							</attribute>
						
						</button>
						</hbox>
						</div>
						<div align="right"><listexportbutton acces="${canQueryAgent}" listbox="gridControlAccess"/></div>
						</hbox>
					</vbox>
					</tabpanel>
					<tabpanel id="tabMetadata">
						<accountMetadata/>
					</tabpanel>
				</tabpanels>
			</tabbox>				
			</form>
		</detalls>
	</esquemavertical>

	<window visible="false" width="70em" title="${c:l('rules.preview') }" id="previewWindow"
		closable="true"
		onClose="self.setVisible(false); event.stopPropagation();">
		<div style="max-height: 20em; overflow-y:scroll" >
			<div use="com.soffid.iam.web.component.FileDump"
				id="previewDiv"/>
		</div>
		<div style="text-align: right; margin: 2em">
			<button label="${c:l('error.zul.Tancar')}">
				<attribute name="onClick">
					previewWindow.setVisible(false);
				</attribute>
			</button>
			<button label="${c:l('rules.apply')}">
				<attribute name="onClick">
					model.commit();
					es.caib.seycon.ng.comu.Dispatcher d = esquema.getFellow("dades").getFellow("form").getJXPathContext().getValue("/").getInstance();
					es.caib.seycon.ng.EJBLocator.getDispatcherService().applyConfiguration(d) ;
					previewWindow.setVisible(false);
				</attribute>
			</button>
		</div>
		
	</window>

	<window visible="false" width="80%" title="Test log" id="testWindow"
		closable="true"
		onClose="self.setVisible(false); event.stopPropagation();">
		<div>
			<label value="${c:l('job.status') }: "/>
			<label id="status"/>
		</div>
		<textbox id="log" multiline="true" rows="20" width="100%" readonly="true"/>
		<div style="text-align: right; margin: 2em">
			<button label="${c:l('error.zul.Tancar')}">
				<attribute name="onClick">
					testWindow.setVisible(false);
				</attribute>
			</button>
		</div>
	</window>

	<window closable="true" width="80%" id="logWindow"
		title=""
		onClose='self.visible=false; event.stopPropagation();'
		visible="false">
		<textbox id="tb" width="100%" height="150px" multiline="true" style="font-family: monospace; resize: vertical"/>
	</window>
	
	<include src="grupsllista.zul"/>
	<include src="controlAcces.zul"/>
 	<include src="finestres/editor.zul"/>
 	<include src="finestres/agent_objectAttributes.zul"/>
</zk>
