<?xml version="1.0" encoding="UTF-8" standalone="no"?><?page id="federationProfile" title="Profile"?>
<?taglib uri="/WEB-INF/tld/web/core.dsp.tld" prefix="c" ?>
<?component name="input_criteri" macro-uri="../comu/input_criteri.zul"?>
<?component name="input_dada" macro-uri="../comu/input_dada.zul"?>
<?component name="input_etiqueta" macro-uri="../comu/input_etiqueta.zul"?>
<zk xmlns:h="http://www.w3.org/1999/xhtml">

	<style src="~./styles/estil.css"/>

	<zscript src="../comu/netejaCriteris.zul"/>

	<zscript>
	fileres = es.caib.seycon.ng.web.Custom.FILERES;

	mode = "query";
	view_altres = false;
	void populateDetails() {
		mode = "query";
	}
	// Autoritzacions
	import es.caib.seycon.ng.utils.AutoritzacionsUsuari;
	import es.caib.seycon.ng.comu.*;
	canQueryFederacions = AutoritzacionsUsuari.canQueryAllIdentityFederation();
	canCreateFI = AutoritzacionsUsuari.canCreateAllIdentityFederation();
	canUpdateFI = AutoritzacionsUsuari.canUpdateAllIdentityFederation();
	canDeleteFI = AutoritzacionsUsuari.canDeleteAllIdentityFederation();

	canModifyFI = canCreateFI || canUpdateFI;
	Boolean f = new Boolean(false);
	
	</zscript>
	<zscript><![CDATA[
	SAMLProfile creaBuit() {
		SAMLProfile buit = new SAMLProfile(SamlProfileEnumeration.SAML_PRO);
		buit.setEnabled(f);
		buit.setEncryptAssertions(SAMLRequirementEnumeration.CONDITIONAL);
		buit.setEncryptNameIds(SAMLRequirementEnumeration.NEVER);
		buit.setIncludeAttributeStatement(f);
		buit.setSignResponses(SAMLRequirementEnumeration.CONDITIONAL);
		buit.setSignAssertions(SAMLRequirementEnumeration.NEVER);
		buit.setSignRequests(SAMLRequirementEnumeration.CONDITIONAL);
		return buit;
	}
	
	
	
	void cleanWindow() {
		carregaDades(creaBuit());
		esquema.visible = false;
		view_altres = false;
	}
	void acceptaDada() {
	
		boolean modificar = desktop.getPage("federationProfile").getAttribute("modificar");
		String xpath = desktop.getPage("federationProfile").getAttribute("xpath");
		
		Component formComponent = (Component) pageScope.get("contextComponent");
		if (modificar) {
			//Missatgebox.info ("modificar "+profile+ "  " +xpath);
			Events.postEvent("onUpdate", formComponent, new Object[] {profile, xpath});
		}
		else { //nou
			Events.postEvent("onActualitza", formComponent, profile);
		}
		cleanWindow();
	}
	
	// El profile que hem rebut
	SAMLProfile profile = null;
	
	
	void mostraCampsTipusSAML(String classe) {
		Grid listbox = esquema.getFellow("profilebox"); 
		
		if (SamlProfileEnumeration.SAML1_AQ.toString().equals(classe) 
				|| SamlProfileEnumeration.SAML2_AQ.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			listbox.getFellow("r_outboundArtifactType").setVisible(true);
			listbox.getFellow("r_assertionLifetime").setVisible(true);
		} else {
			listbox.getFellow("r_outboundArtifactType").setVisible(false);
			listbox.getFellow("r_assertionLifetime").setVisible(false);
		}
		
		if (SamlProfileEnumeration.SAML2_AR.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_AQ.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			listbox.getFellow("r_encryptAssertions").setVisible(true);
			listbox.getFellow("r_encryptNameIds").setVisible(true);
		} else {
			listbox.getFellow("r_encryptAssertions").setVisible(false);
			listbox.getFellow("r_encryptNameIds").setVisible(false);
		}
		
		if (SamlProfileEnumeration.SAML2_AQ.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			listbox.getFellow("r_assertionProxyCount").setVisible(true);
		} else {
			listbox.getFellow("r_assertionProxyCount").setVisible(false);
		}
		
		if (SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			listbox.getFellow("r_includeAttributeStatement").setVisible(true);
		} else {
			listbox.getFellow("r_includeAttributeStatement").setVisible(false);
		}
		
		if (SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)) {
			listbox.getFellow("r_localityAddress").setVisible(true);
			listbox.getFellow("r_localityDNSName").setVisible(true);
		} else {

			listbox.getFellow("r_localityAddress").setVisible(false);
			listbox.getFellow("r_localityDNSName").setVisible(false);
		}
		
		if (SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			listbox.getFellow("r_maximumSPSessionLifetime").setVisible(true);
		} else {
			listbox.getFellow("r_maximumSPSessionLifetime").setVisible(false);		
		}
	
	}
	
	void carregaDades(SAMLProfile prof) {
		Grid listbox = esquema.getFellow("profilebox");
		String classe = prof.getClasse() != null ? prof.getClasse().toString() : SamlProfileEnumeration.SAML_PRO.toString();
		Listbox lbclasse = listbox.getFellow("classe");
		
		// No deixam modificar el tipus.. si ja Ã©s creat
		lbclasse.setDisabled(prof.getId()!=null);
		 
		for(Iterator it = lbclasse.getItems().iterator(); it.hasNext();) {
  			Listitem li = (Listitem) it.next();
  			if (classe.equals(li.getLabel())) {
    			li.setSelected(true);
    		break;
  			}
		}
		
		Listbox lbsignResponses = listbox.getFellow("signResponses");
		SAMLRequirementEnumeration v = prof.getSignResponses();
		for(Iterator it = lbsignResponses.getItems().iterator(); it.hasNext();) {
  			Listitem li = (Listitem) it.next();  
	  		if (v!=null && v.equals( li.getValue()))  {
	    		li.setSelected(true); 
	    		break;
  			}
		}
		
		Listbox lbsignAssertions = listbox.getFellow("signAssertions");
		v = prof.getSignAssertions();
		for(Iterator it = lbsignAssertions.getItems().iterator(); it.hasNext();) {
  			Listitem li = (Listitem) it.next();
  			if (v!=null && v.equals( li.getValue()))  {
	    		li.setSelected(true);
	    		break;
  			}
		}
		
		Listbox lbsignRequests = listbox.getFellow("signRequests");
		v = prof.getSignRequests();
		for(Iterator it = lbsignRequests.getItems().iterator(); it.hasNext();) {
  			Listitem li = (Listitem) it.next();
  			if (v!=null && v.equals( li.getValue()))  {
	    		li.setSelected(true);
	    		break;
  			}
		}
		
		

		//listbox.getFellow("signResponses").setChecked(prof.getSignResponses());
		//listbox.getFellow("signAssertions").setChecked(prof.getSignAssertions());
		//listbox.getFellow("signRequests").setChecked(prof.getSignRequests());
		listbox.getFellow("enabled").setChecked(prof.getEnabled());
		
		
		// mostrem els camps corresponents al tipus de profile
		mostraCampsTipusSAML(classe);

		if (SamlProfileEnumeration.SAML1_AQ.toString().equals(classe) 
				|| SamlProfileEnumeration.SAML2_AQ.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			listbox.getFellow("outboundArtifactType").setValue(prof.getOutboundArtifactType());
			listbox.getFellow("assertionLifetime").setValue(prof.getAssertionLifetime());
		} else {
			listbox.getFellow("outboundArtifactType").setValue("");
			listbox.getFellow("assertionLifetime").setValue("");
		}
		
		if (SamlProfileEnumeration.SAML2_AR.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_AQ.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			//listbox.getFellow("encryptAssertions").setChecked(prof.getEncryptAssertions());
			//listbox.getFellow("encryptNameIds").setChecked(prof.getEncryptNameIds());
			Listbox lbencryptAssertions = listbox.getFellow("encryptAssertions");
			v = prof.getEncryptAssertions();
			for(Iterator it = lbencryptAssertions.getItems().iterator(); it.hasNext();) {
	  			Listitem li = (Listitem) it.next();
	  			if (v!=null && v.equals( li.getValue()))  {
	    			li.setSelected(true);
	    			break;
	  			}
			}
			Listbox lbencryptNameIds = listbox.getFellow("encryptNameIds");
			v = prof.getEncryptNameIds();
			for(Iterator it = lbencryptNameIds.getItems().iterator(); it.hasNext();) {
	  			Listitem li = (Listitem) it.next();
	  			if (v!=null && v.equals( li.getValue()))  {
	    			li.setSelected(true);
	    			break;
	  			}
			}
		} else {
			//listbox.getFellow("encryptAssertions").setChecked(false);
			//listbox.getFellow("encryptNameIds").setChecked(false);
		}
		
		if (SamlProfileEnumeration.SAML2_AQ.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			if (prof.getAssertionProxyCount()!=null) listbox.getFellow("assertionProxyCount").setValue(prof.getAssertionProxyCount()+"");
		} else {
			listbox.getFellow("assertionProxyCount").setValue("");
		}
		
		if (SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)
				|| SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			listbox.getFellow("includeAttributeStatement").setChecked(prof.getIncludeAttributeStatement()!=null?prof.getIncludeAttributeStatement():false);
		} else {
			listbox.getFellow("includeAttributeStatement").setChecked(false);
		}
		
		
		if (SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)) {
			listbox.getFellow("localityAddress").setValue(prof.getLocalityAddress());
			listbox.getFellow("localityDNSName").setValue(prof.getLocalityDNSName());
		} else {
			listbox.getFellow("localityAddress").setValue("");
			listbox.getFellow("localityDNSName").setValue("");
		}
		
		if (SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
			listbox.getFellow("maximumSPSessionLifetime").setValue(prof.getMaximumSPSessionLifetime());
		} else {
			listbox.getFellow("maximumSPSessionLifetime").setValue("");		
		}
	}
	]]>
	</zscript>

	<window closable="true" id="esquema" position="center, center" sizable="true" title="${c:l('federa_profile.Titol')}" visible="false" width="${amplefinestra}">
		<attribute name="onInicia"><![CDATA[
			pageScope.put("contextComponent", event.data);
		
			if (self.mode.compareToIgnoreCase("highlighted") != 0) {
				self.setMode("highlighted");
			} else {
				self.visible = true;
			}
			if (event.data!=null ) {
				boolean modificar = desktop.getPage("federationProfile").getAttribute("modificar");
				// obtenim el profile qne ens pasen per editar
				p = desktop.getPage("federationProfile").getAttribute("profile");
				if (modificar) {
					profile = (SAMLProfile) p;
				} else {
					// un de nou
					profile = creaBuit();
				}
				carregaDades(profile);
			}
			]]>			
		</attribute>
		<attribute name="onClose">
			cleanWindow();
			event.stopPropagation();
		</attribute>

		<grid fixedLayout="true" id="profilebox">
		<zscript><![CDATA[
	
			ListModelList modelSAML = new ListModelList(SamlProfileEnumeration.literals());
			//ListModelList modelSAMLRequirement = new ListModelList(SAMLRequirementEnumeration.names());
			 
			SAMLRequirementEnumeration _never = SAMLRequirementEnumeration.NEVER;
			SAMLRequirementEnumeration _always = SAMLRequirementEnumeration.ALWAYS;
			SAMLRequirementEnumeration _conditional = SAMLRequirementEnumeration.CONDITIONAL;
			 
			void seleccionaValorsPerDefecte(String classe) {
				if (SamlProfileEnumeration.SAML1_AR.toString().equals(classe)) {
					this.signResponses.setSelectedIndex(2); //CONDITIONAL
					this.signAssertions.setSelectedIndex(0); //NEVER
					
				} else if (SamlProfileEnumeration.SAML2_AR.toString().equals(classe)) {
					this.signResponses.setSelectedIndex(0); //NEVER
					this.signAssertions.setSelectedIndex(1); //ALWAYS
					this.encryptAssertions.setSelectedIndex(2); //CONDITIONAL
					this.encryptNameIds.setSelectedIndex(0); //NEVER
				} else if (SamlProfileEnumeration.SAML1_AQ.toString().equals(classe)) {
					this.assertionLifetime.setValue("PT5M");
					this.signResponses.setSelectedIndex(2); //CONDITIONAL
					this.signAssertions.setSelectedIndex(0); //NEVER
				} else if (SamlProfileEnumeration.SAML2_AQ.toString().equals(classe)) {
					this.assertionLifetime.setValue("PT5M");
					this.assertionProxyCount.setValue("0");
					this.signResponses.setSelectedIndex(2); //CONDITIONAL
					this.signAssertions.setSelectedIndex(0); //NEVER
					this.encryptAssertions.setSelectedIndex(2); //CONDITIONAL
					this.encryptNameIds.setSelectedIndex(0); //NEVER
				} else if (SamlProfileEnumeration.SAML2_SSO.toString().equals(classe)) {
					this.includeAttributeStatement.setChecked(true);
					this.assertionLifetime.setValue("PT5M");
					this.assertionProxyCount.setValue("0");
					this.signResponses.setSelectedIndex(0); //NEVER
					this.signAssertions.setSelectedIndex(1); //ALWAYS
					this.encryptAssertions.setSelectedIndex(0); //NEVER
					this.encryptNameIds.setSelectedIndex(0); //NEVER
				} else if (SamlProfileEnumeration.SAML2_ECP.toString().equals(classe)) {
					this.includeAttributeStatement.setChecked(true);
					this.assertionLifetime.setValue("PT5M");
					this.assertionProxyCount.setValue("0");
					this.signResponses.setSelectedIndex(0); //NEVER
					this.signAssertions.setSelectedIndex(1); //ALWAYS
					this.encryptAssertions.setSelectedIndex(0); //NEVER
					this.encryptNameIds.setSelectedIndex(0); //NEVER
				}
				
			}		 
		 ]]>
		</zscript>
				<columns visible="false">
					<column width="200px"/>
					<column width="*"/>
				</columns>
				<rows>
					<row>
						<input_etiqueta value="${c:l('federa_profile.zul.classe')}"/>
						<listbox disabled="${!canModifyFI}" id="classe" model="${modelSAML}" mold="select" style="font-size: 12px" width="200px">
							<attribute name="onSelect">
								String selectC = (String) self.getSelectedItem().getValue();
								SamlProfileEnumeration kla = SamlProfileEnumeration.fromString(selectC);
								profile.setClasse(kla);
								mostraCampsTipusSAML(selectC);
								if (profile.getId() == null) {
									seleccionaValorsPerDefecte(selectC);
								}
							</attribute>
						</listbox>
					</row>
					<row>
						<input_etiqueta value="${c:l('federa_profile.zul.signResponses')}"/>
						<listbox disabled="${!canModifyFI}" id="signResponses" mold="select" style="font-size: 12px" width="200px">
							<listitem label="${c:l('federa_profile.zul.NEVER')}" value="${_never}"/>
							<listitem label="${c:l('federa_profile.zul.ALWAYS')}" value="${_always}"/>
							<listitem label="${c:l('federa_profile.zul.CONDITIONAL')}" value="${_conditional}"/>
							<attribute name="onSelect">
								profile.setSignResponses((SAMLRequirementEnumeration) self.getSelectedItem().getValue());
							</attribute>
						</listbox>
					</row>
					<row>
						<input_etiqueta value="${c:l('federa_profile.zul.signAssertions')}"/>
						<listbox disabled="${!canModifyFI}" id="signAssertions" mold="select" style="font-size: 12px" width="200px">
							<listitem label="${c:l('federa_profile.zul.NEVER')}" value="${_never}"/>
							<listitem label="${c:l('federa_profile.zul.ALWAYS')}" value="${_always}"/>
							<listitem label="${c:l('federa_profile.zul.CONDITIONAL')}" value="${_conditional}"/>
							<attribute name="onSelect">
								profile.setSignAssertions((SAMLRequirementEnumeration) self.getSelectedItem().getValue());
							</attribute>
						</listbox>						
					</row>
					<row>
						<input_etiqueta value="${c:l('federa_profile.zul.signRequests')}"/>
						<listbox disabled="${!canModifyFI}" id="signRequests" mold="select" style="font-size: 12px" width="200px">
							<listitem label="${c:l('federa_profile.zul.NEVER')}" value="${_never}"/>
							<listitem label="${c:l('federa_profile.zul.ALWAYS')}" value="${_always}"/>
							<listitem label="${c:l('federa_profile.zul.CONDITIONAL')}" value="${_conditional}"/>
							<attribute name="onSelect">
								profile.setSignRequests((SAMLRequirementEnumeration) self.getSelectedItem().getValue());
							</attribute>
						</listbox>						
					</row>
					<row>
						<input_etiqueta value="${c:l('federa_profile.zul.enabled')}"/>
						<checkbox disabled="${!canModifyFI}" id="enabled">
							<attribute name="onCheck">
								profile.setEnabled(self.isChecked());
							</attribute>
						</checkbox>
					</row>
					<row id="r_outboundArtifactType">
						<input_etiqueta value="${c:l('federa_profile.zul.outboundArtifactType')}"/>
						<textbox id="outboundArtifactType" maxlength="255" readonly="${!canModifyFI}" width="98%">
							<attribute name="onChange">
								profile.setOutboundArtifactType(self.getValue());
							</attribute>
						</textbox>
					</row>
					<row id="r_assertionLifetime">
						<input_etiqueta value="${c:l('federa_profile.zul.assertionLifetime')}"/>
						<textbox id="assertionLifetime" maxlength="255" readonly="${!canModifyFI}" width="98%">
							<attribute name="onChange">
								profile.setAssertionLifetime(self.getValue());
							</attribute>
						</textbox>
					</row>
					<row id="r_encryptAssertions">
						<input_etiqueta value="${c:l('federa_profile.zul.encryptAssertions')}"/>
						<listbox disabled="${!canModifyFI}" id="encryptAssertions" mold="select" style="font-size: 12px" width="200px">
							<listitem label="${c:l('federa_profile.zul.NEVER')}" value="${_never}"/>
							<listitem label="${c:l('federa_profile.zul.ALWAYS')}" value="${_always}"/>
							<listitem label="${c:l('federa_profile.zul.CONDITIONAL')}" value="${_conditional}"/>
							<attribute name="onSelect">
								profile.setEncryptAssertions((SAMLRequirementEnumeration) self.getSelectedItem().getValue());
							</attribute>
						</listbox>
					</row>
					<row id="r_encryptNameIds">
						<input_etiqueta value="${c:l('federa_profile.zul.encryptNameIds')}"/>
						<listbox disabled="${!canModifyFI}" id="encryptNameIds" mold="select" style="font-size: 12px" width="200px">
							<listitem label="${c:l('federa_profile.zul.NEVER')}" value="${_never}"/>
							<listitem label="${c:l('federa_profile.zul.ALWAYS')}" value="${_always}"/>
							<listitem label="${c:l('federa_profile.zul.CONDITIONAL')}" value="${_conditional}"/>
							<attribute name="onSelect">
								profile.setEncryptNameIds((SAMLRequirementEnumeration) self.getSelectedItem().getValue());
							</attribute>
						</listbox>						
					</row>
					<row id="r_assertionProxyCount">
						<input_etiqueta value="${c:l('federa_profile.zul.assertionProxyCount')}"/>
						<textbox constraint="/^[0-9]*$/: Valor numÃ¨ric" id="assertionProxyCount" maxlength="255" readonly="${!canModifyFI}" width="98%">
							<attribute name="onChange">
								if (self.value!=null @and !"".equals(self.value.trim())) profile.setAssertionProxyCount(Long.parseLong(self.getValue()));
							</attribute>
						</textbox>
					</row>
					<row id="r_includeAttributeStatement">
						<input_etiqueta value="${c:l('federa_profile.zul.includeAttributeStat')}"/>
						<checkbox disabled="${!canModifyFI}" id="includeAttributeStatement">
							<attribute name="onCheck">
								profile.setIncludeAttributeStatement(self.isChecked());
							</attribute>						
						</checkbox>
					</row>
					<row id="r_localityAddress">
						<input_etiqueta value="${c:l('federa_profile.zul.localityAddress')}"/>
						<textbox id="localityAddress" maxlength="255" readonly="${!canModifyFI}" width="98%">
							<attribute name="onChange">
								profile.setLocalityAddress(self.getValue());
							</attribute>
						</textbox>
					</row>
					<row id="r_localityDNSName">
						<input_etiqueta value="${c:l('federa_profile.zul.localityDNSName')}"/>
						<textbox id="localityDNSName" maxlength="255" readonly="${!canModifyFI}" width="98%">
							<attribute name="onChange">
								profile.setLocalityDNSName(self.getValue());
							</attribute>
						</textbox>
					</row>
					<row id="r_maximumSPSessionLifetime">
						<input_etiqueta value="${c:l('federa_profile.zul.maximumSPSessionLife')}"/>
						<textbox id="maximumSPSessionLifetime" maxlength="255" readonly="${!canModifyFI}" width="98%">
							<attribute name="onChange">
								profile.setMaximumSPSessionLifetime(self.getValue());
							</attribute>						
						</textbox>
					</row>
				</rows>
			</grid>

		<separator spacing="5px"/>
		<hbox style="margin-left:auto; margin-right:auto">
			<button id="finishButton" label="${c:l('federa_profile.zul.Accepta')}">
				<attribute name="onClick">
					if (!self.disabled) {
						acceptaDada();
					}
				</attribute>
			</button>
			<button label="${c:l('federa_profile.zul.CancelÂ·la')}" onClick="cleanWindow()"/>
		</hbox>

	</window>

</zk>