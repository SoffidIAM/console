<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?page id="identity" title="Search for identities"?>
<?taglib uri="/WEB-INF/tld/web/core.dsp.tld" prefix="c" ?>
<?component name="input_dada" macro-uri="../comu/input_dada.zul"?>
<?component name="input_etiqueta" macro-uri="../comu/input_etiqueta.zul"?>

<zk>

	<div xmlns:h="http://www.w3.org/1999/xhtml" width="100%" > 
	
	
	<window id="identityWindow" closable="true" position="center, center"
		sizable="false" 
		style="min-width: 60em; width:60%"
		title="${c:l('identity.title')}" 
		visible="false">
		<attribute name="onDisplay"><![CDATA[
		    // Variables to set:
		    // title: window title
		    // types: Array of identity types
		    // invoker: Invoker component
		    // currentIdentities: identities pre-loaded
			start();
		]]></attribute>
		<attribute name="onClose"><![CDATA[
			event.stopPropagation();		                                 
			cancel();
		]]></attribute>

		<timer id="timer" repeats="true" delay="1000" running="false">
			<attribute name="onTimer"><![CDATA[
		    boolean any = false;
		    any = fetchAsyncData(userList, userListPosition, "user") || any;
		    any = fetchAsyncData(roleList, roleListPosition, "role") || any;
		    any = fetchAsyncData(groupList, groupListPosition, "group") || any;
		    any = fetchAsyncData(appList, appListPosition, "app") || any;
		    any = fetchAsyncData(domainValueList, domainValueListPosition, "domainValue") || any;
		    
			if (!any) {
				timer.stop();
				searchProgress.setVisible(false);
			}
			else
			{
				Collections.sort(ids, com.soffid.iam.web.component.Identity.getComparator());
				result.getChildren().clear();
				for (com.soffid.iam.web.component.Identity id: ids)
				{
					Div d = id.generateSelector(searchCriteria);
					result.appendChild(d);
					d.addEventListener("onClick", new org.zkoss.zk.ui.event.EventListener(){
						public void onEvent(Event e)
						{
							selectCandidate(e);
						}
					});
				}
			}
			]]></attribute>
		</timer>

		<zscript><![CDATA[		 
		// Used for grants
		com.soffid.iam.api.AsyncList userList = null;
		int[] userListPosition = new int[1];
		com.soffid.iam.api.AsyncList accountList = null;
		int[] accountListPosition = new int[1];
		com.soffid.iam.api.AsyncList roleList = null;
		int[] roleListPosition = new int[1];
		com.soffid.iam.api.AsyncList groupList = null;
		int[] groupListPosition = new int[1];
		com.soffid.iam.api.AsyncList appList = null;
		int[] appListPosition = new int[1];
		com.soffid.iam.api.AsyncList domainValueList = null;
		int[] domainValueListPosition = new int[1];
		List ids = null;
		String searchCriteria = "";
		
		com.soffid.iam.api.Role currentRole = null;
		String currentRolePrefix = null;
		boolean grantMode = false;
		
		page.setVariable("singleIdentity", false);
		page.setVariable("wildcardDomain", false);
		
		boolean fetchAsyncData ( com.soffid.iam.api.AsyncList list, int[] position, String tag) {
			boolean any = false;
			if (list != null)
			{
				Iterator it = list.iterator();
				if ( (list.isDone() &&  position[0] == list.size()) || list.isCancelled())
				{
					Throwable th = list.getExceptionToThrow();
					list.clearExceptionToThrow();
					if (th != null)
						throw th; 
					any = false;
				} else if (list.size() > position[0]) {
					int i = 0;
					while (it.hasNext())
					{
					    Object o = it.next();
						if (i++ >= position[0])
						{
							com.soffid.iam.web.component.Identity id = 
									currentRole == null ? 
										new com.soffid.iam.web.component.Identity(o):
										new com.soffid.iam.web.component.Identity(currentRole, o);
							ids.add(id);				
							position[0] ++;
						}
					}
					any = true;
				} else {
					any = true;
				}
			}
			return any;

		}
		
		void start () {
			if (title != null && title != void)
				identityWindow.setTitle( title );
			identityWindow.doHighlighted();
			selected.getChildren().clear();
			if ( currentIdentities != null && currentIdentities != void)
			{
				for (com.soffid.iam.web.component.Identity id: currentIdentities) {
					selected.appendChild(id.generateTag(true) );
				}
			}
			grantMode = false;
			for (com.soffid.iam.web.component.Identity.Type type: types)
			{
				if (type == com.soffid.iam.web.component.Identity.Type.GRANT)
					grantMode = true;
			}
			textbox.setValue("");
			result.getChildren().clear();
			currentRole = null;
		}
		
		void cancel()
		{
			currentIdentities = null;
			identityWindow.setVisible(false);
		}
		
		void accept()
		{
			List identities = new LinkedList();
			for ( Component div: selected.getChildren())
			{
				com.soffid.iam.web.component.Identity id = div.getAttribute("identity");
				identities.add(id);
			}
			currentIdentities = null;
			identityWindow.setVisible(false);
			Events.sendEvent(new Event("onIdentity", invoker, identities));
			
		}

		void selectCandidate (Event e)
		{
			com.soffid.iam.web.component.Identity id = e.getTarget().getAttribute("identity");
			e.getTarget().detach();
			for (Component child: selected.getChildren())
			{
				com.soffid.iam.web.component.Identity id2 = child.getAttribute("identity");
				if (id.equals(id2))
					return;
			}
			if (grantMode && id.getObject() instanceof com.soffid.iam.api.Role)
			{
				com.soffid.iam.api.Role role = id.getObject(); 
				if (id.getObject().getDomain() == null ||
						id.getObject().getDomain().getName().equals(es.caib.seycon.ng.comu.TipusDomini.SENSE_DOMINI))
					id = new com.soffid.iam.web.component.Identity( role, (com.soffid.iam.api.DomainValue) null);
				else
				{
					currentRolePrefix = role.getName()+" @ "+role.getSystem()+" / ";
					currentRole = role;
					textbox.setValue(currentRolePrefix);
					textbox.focus();
					textbox.setSelectionRange(currentRolePrefix.length(), currentRolePrefix.length());
					result.getChildren().clear();
//					if (role.getDomain().getExternalCode() != null)
					search(currentRolePrefix);
					return;
				}
			}
				
			selected.appendChild(id.generateTag(true) );
			textbox.focus();
			textbox.setSelectionRange(0, textbox.getText().length());
			if (singleIdentity)
			{
				accept();
			}
		}
		
		void search(String t) throws Exception
		{
			ids = new LinkedList();
			searchCriteria = t;
			searchSomething (t, ids);
			
			searchProgress.setVisible(true);
			
			Collections.sort(ids, com.soffid.iam.web.component.Identity.getComparator());
			result.getChildren().clear();
			for (com.soffid.iam.web.component.Identity id: ids)
			{
				Div d = id.generateSelector(t);
				result.appendChild(d);
				d.addEventListener("onClick", new org.zkoss.zk.ui.event.EventListener(){
					public void onEvent(Event e)
					{
						selectCandidate(e);
					}
				});
			}
		}
		
		void searchSomething (String t, List ids)
		{
			if (userList != null) {
				userList.cancel();
			}
			if (accountList != null) accountList.cancel();
			if (roleList != null) roleList.cancel();
			if (groupList != null) groupList.cancel();
			if (domainValueList != null) domainValueList.cancel();
			if (appList != null) appList.cancel();
			
			for (com.soffid.iam.web.component.Identity.Type type: types)
			{
				if (type == com.soffid.iam.web.component.Identity.Type.USER)
					searchUsers(t, ids);
				
				if (type == com.soffid.iam.web.component.Identity.Type.ACCOUNT)
					searchAccounts(t, ids);

				if (type == com.soffid.iam.web.component.Identity.Type.ROLE)
					searchRoles(t, ids);

				if (type == com.soffid.iam.web.component.Identity.Type.GROUP)
					searchGroups(t, ids);
				
				if (type == com.soffid.iam.web.component.Identity.Type.GRANT)
					searchGrants(t, ids);
			}
		}
		
		void searchUsers (String t, List ids) {
			userListPosition[0] = 0;
			userList = com.soffid.iam.EJBLocator.getUserService().findUserByTextAsync(t);
			timer.start();
		}
		                  
		void searchAccounts (String t, List ids) {
			accountListPosition[0] = 0;
			accountList = com.soffid.iam.EJBLocator.getAccountService().findAccountByTextAsync(t);
			timer.start();
		}
		
		void searchRoles (String t, List ids) {
			roleListPosition[0] = 0;
			roleList = com.soffid.iam.EJBLocator.getApplicationService().findRoleByTextAsync(t);
			timer.start();
		}

		void searchGroups (String t, List ids) {
			groupListPosition[0] = 0;
			groupList = com.soffid.iam.EJBLocator.getGroupService().findGroupByTextAsync(t);
			timer.start();
		}


		void searchApplications (String t, List ids) {
			appListPosition[0] = 0;
			appList = com.soffid.iam.EJBLocator.getApplicationService().findApplicationByTextAsync(t);
			timer.start();
		}

		void searchGrants (String t, List ids) {
			
			if ( currentRole == null || currentRolePrefix == null)
				searchRoles(t, ids);
			else if (t.startsWith(currentRolePrefix))
			{

				String t2 = t.substring(currentRolePrefix.length());
				searchCriteria = t2;
				if (wildcardDomain && t2.isEmpty() && ! currentRole.getDomain().getName().equals(com.soffid.iam.api.DomainType.SENSE_DOMINI))
				{
					com.soffid.iam.web.component.Identity id = new com.soffid.iam.web.component.Identity(currentRole, 
							new com.soffid.iam.api.DomainValue());
					ids.add(id);				
				}
				if (currentRole.getDomain().getExternalCode() != null)
				{
					searchDomainValues (currentRole.getDomain(), t2, ids);
				}
				else if (currentRole.getDomain().getName().equals(com.soffid.iam.api.DomainType.APLICACIONS))
				{
					searchApplications (t2, ids);
				}
				else if (currentRole.getDomain().getName().equals(com.soffid.iam.api.DomainType.GRUPS))
				{
					searchGroups(t2, ids);
				}
				else if (currentRole.getDomain().getName().equals(com.soffid.iam.api.DomainType.GRUPS_USUARI))
				{
					searchGroups(t2, ids);
				}
			} else {
				if (currentRolePrefix.startsWith(t))
				{
					currentRole = null;
					currentRolePrefix = null;

					textbox.setValue("");

					
					page.getFellow("identityWindow").getFellow("result").getChildren().clear();
				} else {
					currentRole = null;
					currentRolePrefix = null;
				}
			}
		}
		                  
		void searchDomainValues (com.soffid.iam.api.Domain domain, String t, List ids) {
			domainValueListPosition[0] = 0;
			domainValueList = com.soffid.iam.EJBLocator.getApplicationService().findDomainValueByTextAsync(domain, t);
			timer.start();
		}

		]]></zscript>

		<div style="padding: 3em">
			<div id="selected" style="display: inline"/>
			<div>
			<image src="~./img/soffid-progress.gif" visible="false" style="height: 2em; position:absolute; left: 6px" id="searchProgress"/>
				<textbox style="display:inline-block; width:100%; min-width: 20em; border: none; border-bottom: solid darkgrey 1px; outline:none; margin-right: 3em" id="textbox"
					onOK="search(textbox.value)">
					<attribute name="onChanging"><![CDATA[
					    search (event.value);                            
					]]></attribute>
				</textbox>
			</div>
			<div id="result" style="max-height:12em; overflow-x:hidden; overflow-y:auto"/>
		</div>
		
		<div style="float: right;">
			<button label="${c:l('agentsllista.zul.Accepta') }" onClick="accept()"/>
			<button label="${c:l('agentsllista.zul.Cancel·la') }" onClick="cancel()"/>
		</div>
		
		<div style="clear: both;"/>

	</window>
	
	<include src="/finestres/aplica_rolsllista.zul"/>
	<include src="/dominisllista.zul"/>
	
	<include src="/finestres/aplica_rol_valorDomini.zul"/>
</div>

</zk>
