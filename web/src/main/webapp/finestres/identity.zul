<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?page id="identity" title="Search for identities"?>
<?taglib uri="/WEB-INF/tld/web/core.dsp.tld" prefix="c" ?>
<?component name="input_dada" macro-uri="../comu/input_dada.zul"?>
<?component name="input_etiqueta" macro-uri="../comu/input_etiqueta.zul"?>

<zk>

	<div xmlns:h="http://www.w3.org/1999/xhtml" width="100%" > 
	
	
	
	<window id="identityWindow" closable="true" position="center, center"
		sizable="false" 
		style="min-width: 60em; width:60%"
		title="${c:l('identity.title')}" 
		visible="false">
		<attribute name="onDisplay"><![CDATA[
		    // Variables to set:
		    // title: window title
		    // types: Array of identity types
		    // invoker: Invoker component
		    // currentIdentities: identities pre-loaded
			start();
		]]></attribute>

		<zscript><![CDATA[		 
		// Used for grants		                  
		com.soffid.iam.api.Role currentRole = null;
		String currentRolePrefix = null;
		boolean grantMode = false;
		
		void start () {		                  
			identityWindow.setTitle( title );
			identityWindow.doHighlighted();
			selected.getChildren().clear();
			if ( currentIdentities != null && currentIdentities != void)
			{
				for (com.soffid.iam.web.component.Identity id: currentIdentities) {
					selected.appendChild(id.generateTag(true) );
				}
			}
			grantMode = false;
			for (com.soffid.iam.web.component.Identity.Type type: types)
			{
				if (type == com.soffid.iam.web.component.Identity.Type.GRANT)
					grantMode = true;
			}
			textbox.setValue("");
			result.getChildren().clear();
		}
		
		void cancel()
		{
			currentIdentities = null;
			identityWindow.setVisible(false);
		}
		
		void accept()
		{
			List identities = new LinkedList();
			for ( Component div: selected.getChildren())
			{
				com.soffid.iam.web.component.Identity id = div.getAttribute("identity");
				identities.add(id);
			}
			currentIdentities = null;
			identityWindow.setVisible(false);
			Events.sendEvent(new Event("onIdentity", invoker, identities));
			
		}

		void selectCandidate (Event e)
		{
			com.soffid.iam.web.component.Identity id = e.getTarget().getAttribute("identity");
			e.getTarget().detach();
			for (Component child: selected.getChildren())
			{
				com.soffid.iam.web.component.Identity id2 = child.getAttribute("identity");
				if (id.equals(id2))
					return;
			}
			if (grantMode && id.getObject() instanceof com.soffid.iam.api.Role)
			{
				com.soffid.iam.api.Role role = id.getObject(); 
				if (id.getObject().getDomain() == null ||
						id.getObject().getDomain().getName().equals(es.caib.seycon.ng.comu.TipusDomini.SENSE_DOMINI))
					id = new com.soffid.iam.web.component.Identity( role, (com.soffid.iam.api.DomainValue) null);
				else
				{
					currentRolePrefix = role.getName()+" @ "+role.getSystem()+" / ";
					currentRole = role;
					textbox.setValue(currentRolePrefix);
					textbox.focus();
					textbox.setSelectionRange(currentRolePrefix.length(), currentRolePrefix.length());
					result.getChildren().clear();
					if (role.getDomain().getExternalCode() != null)
						search(currentRolePrefix);
					return;
				}
			}
				
			selected.appendChild(id.generateTag(true) );
			textbox.focus();
			textbox.setSelectionRange(0, textbox.getText().length());
		}
		
		void search(String t) throws Exception
		{
			List ids = new LinkedList();
			searchSomething (t, ids);

			Collections.sort(ids, com.soffid.iam.web.component.Identity.getComparator());
			result.getChildren().clear();
			for (com.soffid.iam.web.component.Identity id: ids)
			{
				Div d = id.generateSelector(t);
				result.appendChild(d);
				d.addEventListener("onClick", new org.zkoss.zk.ui.event.EventListener(){
					public void onEvent(Event e)
					{
						selectCandidate(e);
					}
				});
			}
		}
		
		void searchSomething (String t, List ids)
		{
			for (com.soffid.iam.web.component.Identity.Type type: types)
			{
				if (type == com.soffid.iam.web.component.Identity.Type.USER)
				{
					searchUsers(t, ids);
				}
				if (type == com.soffid.iam.web.component.Identity.Type.ACCOUNT)
				{
					searchAccounts(t, ids);
				}
				if (type == com.soffid.iam.web.component.Identity.Type.ROLE)
				{
					searchRoles(t, ids);
				}
				if (type == com.soffid.iam.web.component.Identity.Type.GROUP)
				{
					searchGroups(t, ids);
				}
				if (type == com.soffid.iam.web.component.Identity.Type.GRANT)
				{
					searchGrants(t, ids);
				}
			}
		}
		
		void searchUsers (String t, List ids) {
			Collection users = com.soffid.iam.EJBLocator.getUserService().findUserByText(t);
			for (com.soffid.iam.api.User user: users) {
				com.soffid.iam.web.component.Identity id = new com.soffid.iam.web.component.Identity(user);
				ids.add(id);				
			}
		}
		                  
		void searchAccounts (String t, List ids) {
			Collection accounts = com.soffid.iam.EJBLocator.getAccountService().findAccountByText(t);
			for (com.soffid.iam.api.Account acc: accounts) {
				com.soffid.iam.web.component.Identity id = new com.soffid.iam.web.component.Identity(acc);
				ids.add(id);
			}
		}
		
		void searchRoles (String t, List ids) {
			Collection roles = com.soffid.iam.EJBLocator.getApplicationService().findRoleByText(t);
			for (com.soffid.iam.api.Role role: roles) {
				com.soffid.iam.web.component.Identity id = new com.soffid.iam.web.component.Identity(role);
				ids.add(id);
			}
		}

		void searchGroups (String t, List ids) {
			Collection groups = com.soffid.iam.EJBLocator.getGroupService().findGroupByText(t);
			for (com.soffid.iam.api.Group group: groups) {
				com.soffid.iam.web.component.Identity id = new com.soffid.iam.web.component.Identity(group);
				ids.add(id);
			}
		}

		void searchGroups (com.soffid.iam.api.Role role, String t, List ids) {
			Collection groups = com.soffid.iam.EJBLocator.getGroupService().findGroupByText(t);
			for (com.soffid.iam.api.Group group: groups) {
				com.soffid.iam.web.component.Identity id = new com.soffid.iam.web.component.Identity(role, group);
				ids.add(id);
			}
		}

		void searchApplications (com.soffid.iam.api.Role role, String t, List ids) {
			Collection apps = com.soffid.iam.EJBLocator.getGroupService().findApplicationsByText(t);
			for (com.soffid.iam.api.Application app: apps) {
				com.soffid.iam.web.component.Identity id = new com.soffid.iam.web.component.Identity(role, app);
				ids.add(id);
			}
		}

		void searchGrants (String t, List ids) {
			
			if ( currentRole == null || currentRolePrefix == null)
				searchRoles(t, ids);
			else if (t.startsWith(currentRolePrefix))
			{

				String t2 = t.substring(currentRolePrefix.length());
				if (currentRole.getDomain().getExternalCode() != null)
				{
					searchDomainValues (currentRole, currentRole.getDomain(), t2, ids);
				}
				else if (currentRole.getDomain().getName().equals(com.soffid.iam.api.DomainType.APLICACIONS))
				{
					searchApplications (currentRole, t2, ids);
				}
				else if (currentRole.getDomain().getName().equals(com.soffid.iam.api.DomainType.GRUPS))
				{
					searchGroups(currentRole, t2, ids);
				}
				else if (currentRole.getDomain().getName().equals(com.soffid.iam.api.DomainType.GRUPS_USUARI))
				{
					searchGroups(currentRole, t2, ids);
				}
			} else {
				if (currentRolePrefix.startsWith(t))
				{
					currentRole = null;
					currentRolePrefix = null;

					textbox.setValue("");

					
					page.getFellow("identityWindow").getFellow("result").getChildren().clear();
				} else {
					currentRole = null;
					currentRolePrefix = null;
				}
			}
		}
		                  
		void searchDomainValues (com.soffid.iam.api.Role role,
				com.soffid.iam.api.Domain domain, String t, List ids) {
			Collection values = com.soffid.iam.EJBLocator.getApplicationService().findDomainValueByText(domain, t);
			for (com.soffid.iam.api.DomainValue dv: values) {
				com.soffid.iam.web.component.Identity id = new com.soffid.iam.web.component.Identity(role, dv);
				ids.add(id);
			}
		}

		]]></zscript>

		<div style="padding: 3em">
			<div id="selected" style="display: inline"/>
			<textbox style="display:inline-block; width:100%; min-width: 20em; border: none; border-bottom: solid darkgrey 1px; outline:none" id="textbox">
			<attribute name="onChanging"><![CDATA[
			    search (event.value);                            
			]]></attribute>
			</textbox>
			<div id="result" style="max-height:12em; overflow-x:hidden; overflow-y:auto"/>
		</div>
		
		<div style="float: right;">
			<button label="${c:l('agentsllista.zul.Accepta') }" onClick="accept()"/>
			<button label="${c:l('agentsllista.zul.CancelÂ·la') }" onClick="cancel()"/>
		</div>
		
		<div style="clear: both;"/>

	</window>
	
	<include src="/finestres/aplica_rolsllista.zul"/>
	<include src="/dominisllista.zul"/>
	
	<include src="/finestres/aplica_rol_valorDomini.zul"/>
</div>

</zk>
