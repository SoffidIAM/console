<?xml version="1.0" encoding="UTF-8"?>

<?component name="account_acl" macro-uri="/accounts/accountAcl.zul"?>
<?component name="input_criteri" macro-uri="/comu/input_criteri.zul"?>
<?component name="input_dada" macro-uri="/comu/input_dada.zul"?>
<?component name="input_etiqueta" macro-uri="/comu/input_etiqueta.zul"?>

<zk>
	<zscript><![CDATA[
	                 
	import es.caib.seycon.ng.comu.Account;
	import es.caib.seycon.ng.comu.AccountType;
	import es.caib.seycon.ng.comu.Password;
	
	boolean canUpdateUserMetadata = false;
	Component macro = self;
	String ssoSystem = System.getProperty("AutoSSOSystem"); //$NON-NLS-1$

	macro.addEventListener("onNewAccount", new org.zkoss.zk.ui.event.EventListener() {
	void onEvent (Event evt) {
			onNewAccount(evt.data);
		}
	});
	macro.addEventListener("onOpenAccount", new org.zkoss.zk.ui.event.EventListener() {
		void onEvent (Event evt) {
			onOpenAccount(evt.data);
		}
	});
	
	void onNewAccount (String path) {
		canUpdateUserMetadata = true;

		es.caib.zkib.component.Form form = innerWindow.getFellow("form");
		innerWindow.getFellow("serverRow").setVisible(false);
		innerWindow.getFellow("urlRow").setVisible(false);
		innerWindow.getFellow("serverTextbox").getFellow("dada").setBind(null);
		innerWindow.getFellow("urlTextbox").setBind(null);

		form.setDataPath("/model:"+path);

		innerWindow.setTitle(org.zkoss.util.resource.Labels.getLabel("vault.account.new"));

		String parentPath = path.substring(0, path.lastIndexOf('/'));
		boolean personal = es.caib.zkib.datasource.XPathUtils.getValue(model, parentPath+"/@personal");
		
		Events.sendEvent(new Event("onEnable",  innerWindow.getFellow("ownerAcl"), !personal));
		Events.sendEvent(new Event("onEnable",  innerWindow.getFellow("managerAcl"), !personal));
		Events.sendEvent(new Event("onEnable", innerWindow.getFellow("userAcl"), !personal));
	
		innerWindow.getFellow("inheritNewPermissionsCheckbox").setVisible( ! personal );
		
		// Add folder users
		for (String pathToCopy: new String [] {"grantedUsers", "grantedGroups", "grantedRoles",
				"managerUsers", "managerGroups", "managerRoles",
				"ownerUsers", "ownerGroups", "ownerRoles"} )
		{
			for (Iterator it = model.getJXPathContext().iterate(parentPath+"/"+pathToCopy);
					it.hasNext();)
			{
				System.out.println ("....");
				Object obj = it.next();
				es.caib.zkib.datasource.XPathUtils.createPath(model, path+"/"+pathToCopy, obj);
			}
		}
		String ssoPolicy = System.getProperty("AutoSSOPolicy"); //$NON-NLS-1$
		es.caib.zkib.datasource.XPathUtils.setValue(model, path+"/@dispatcher", ssoSystem);
		es.caib.zkib.datasource.XPathUtils.setValue(model, path+"/@passwordPolicy", ssoPolicy);
		es.caib.zkib.datasource.XPathUtils.setValue(model, path+"/@type", es.caib.seycon.ng.comu.AccountType.SHARED);
		// Create additional data
		createInitialMetadata ();
		
		displayFormatSSO (true);
		innerWindow.doHighlighted();
	}
	
	void onOpenAccount (String path) {
		
		pageScope.put("accountNameOnAttribute", null);
		pageScope.put("newAccount", Boolean.FALSE);

		es.caib.seycon.ng.comu.AccountAccessLevelEnum level = es.caib.zkib.datasource.XPathUtils.
				getValue(model, path+"/@accessLevel");

		boolean isAdmin = level.equals(es.caib.seycon.ng.comu.AccountAccessLevelEnum.ACCESS_OWNER);
		
		canUpdateUserMetadata = true;

		innerWindow.getFellow("serverRow").setVisible(false);
		innerWindow.getFellow("urlRow").setVisible(false);
		innerWindow.getFellow("serverTextbox").getFellow("dada").setBind(null);
		innerWindow.getFellow("urlTextbox").setBind(null);

		es.caib.zkib.component.Form form = innerWindow.getFellow("form");
		form.setDataPath("/model:"+path);

		innerWindow.setTitle(org.zkoss.util.resource.Labels.getLabel("vault.account.new"));

		String parentPath = path.substring(0, path.lastIndexOf('/'));
		boolean personal = false;
		try {
			personal = es.caib.zkib.datasource.XPathUtils.getValue(model, parentPath+"/@personal");
		} catch (Exception e)
		{
			
		}
		
		Events.sendEvent(new Event("onEnable",  innerWindow.getFellow("ownerAcl"), !personal && isAdmin));
		Events.sendEvent(new Event("onEnable",  innerWindow.getFellow("managerAcl"), !personal && isAdmin));
		Events.sendEvent(new Event("onEnable", innerWindow.getFellow("userAcl"), !personal && isAdmin));
	
		innerWindow.getFellow("inheritNewPermissionsCheckbox").setVisible( ! personal && isAdmin);
		

		if (ssoSystem. equals (es.caib.zkib.datasource.XPathUtils.getValue(model, path+"/@dispatcher")))
		{
			String accountAttributeXPath = findNameAttribute();
			if (accountAttributeXPath != null)
			{
				System.out.println ("========================= PATH = "+accountAttributeXPath);
				Object obj = model.getJXPathContext().getValue(accountAttributeXPath);
				System.out.println ("========================= OBJ  = "+obj);
				String value = model.getJXPathContext().getValue(accountAttributeXPath+"/@valorDada");
				System.out.println ("========================= VALUE = "+value);
				if (value != null)
				{
					String[] result = splitValues(value);
					System.out.println ("========================= SPLIT = "+result[1]);
					innerWindow.getFellow("txtAccountName2").setValue (result[1]);	
				}
			}
			displayFormatSSO (isAdmin);
		}
		else
		{
			displayFormatStandard(isAdmin);
	
			try {
				Object ownerName = XPathUtils.getValue(model, path+"/owner[1]/codi");
				innerWindow.getFellow("ownerRow").setVisible (ownerName != null);
			} catch (es.caib.zkib.jxpath.JXPathNotFoundException e) 
			{
				innerWindow.getFellow("ownerRow").setVisible (false);
			}
		}
	
		innerWindow.doHighlighted();
	}

	void onNewAttributeRow(Row row)
	{
		es.caib.zkib.binder.BindContext ctx = es.caib.zkib.datasource.XPathUtils.getComponentContext(row);
		String attribute = es.caib.zkib.datasource.XPathUtils.getValue(ctx, "/@codiDada");
		if (attribute.equals("SSO:Server"))
		{
			row.setVisible(false);
			innerWindow.getFellow("serverRow").setVisible(true);
			String att = ctx.getXPath(); // Gest /attribute[...] path
			att = att.substring(att.lastIndexOf("/")+1) + "/@valorDada";
			innerWindow.getFellow("serverTextbox").getFellow("dada").setBind(att);
		}
		else if (attribute.equals("SSO:URL"))
		{
			innerWindow.getFellow("urlRow").setVisible(true);
			row.setVisible(false);
			String att = ctx.getXPath(); // Gest /attribute[...] path
			att = att.substring(att.lastIndexOf("/")+1) + "/@valorDada";
			innerWindow.getFellow("urlTextbox").setBind(att);
		}
	}
	
	void displayFormatSSO(boolean isAdmin) 
	{
		innerWindow.getFellow("txtAccountName").setVisible(false);
		innerWindow.getFellow("dispatcherRow").setVisible(false);
		innerWindow.getFellow("typeRow").setVisible(false);
		innerWindow.getFellow("dispatcherRow").setVisible(false);
		innerWindow.getFellow("enabledRow").setVisible(false);
		innerWindow.getFellow("passwordPolicyRow").setVisible(false);

		innerWindow.getFellow("txtAccountName2").setVisible(true);

		innerWindow.getFellow("changeFolderButton").setVisible(isAdmin);
		innerWindow.getFellow("txtAccountName2").setReadonly( !isAdmin );
		innerWindow.getFellow("serverTextbox").getFellow("dada").setReadonly( !isAdmin );
		innerWindow.getFellow("urlTextbox").setReadonly( !isAdmin );
		innerWindow.getFellow("txtAccountDescription").getFellow("dada").setReadonly(!isAdmin);

		innerWindow.getFellow("txtAccountName2").focus ();
		innerWindow.getFellow("ownerRow").setVisible (false);
	}
	
	void displayFormatStandard(boolean isAdmin) 
	{
		innerWindow.getFellow("txtAccountName").setVisible(true);
		innerWindow.getFellow("dispatcherRow").setVisible(true);
		innerWindow.getFellow("typeRow").setVisible(false);
		innerWindow.getFellow("dispatcherRow").setVisible(false);
		innerWindow.getFellow("enabledRow").setVisible(true);
		innerWindow.getFellow("passwordPolicyRow").setVisible(true);

		innerWindow.getFellow("changeFolderButton").setVisible(isAdmin);
		innerWindow.getFellow("txtAccountName").getFellow("dada").setReadonly(!isAdmin);
		innerWindow.getFellow("txtAccountDescription").getFellow("dada").setReadonly(!isAdmin);
		innerWindow.getFellow("lbAccountDisabled").setDisabled(!isAdmin);

		innerWindow.getFellow("txtAccountName2").setVisible(false);
		innerWindow.getFellow("txtAccountName").focus ();
	}

	private Long findLastAccount (String system)
	{
		long top = 0;
		es.caib.seycon.ng.utils.Security.nestedLogin(es.caib.seycon.ng.utils.Security.getCurrentAccount(),
				new String [] { es.caib.seycon.ng.utils.Security.AUTO_ACCOUNT_QUERY+es.caib.seycon.ng.utils.Security.AUTO_ALL});
		try {
			es.caib.seycon.ng.servei.AccountService accountService = es.caib.seycon.ng.ServiceLocator.instance()
					.getAccountService();
			long bits = 0;
			long attempt = 1;
			/**
			 * Find radix the first account with number = 2 ^ radix
			 */
			do
			{
				es.caib.seycon.ng.comu.Account acc = accountService.findAccount(""+attempt, system);
				if (acc == null) break;
				top = attempt;
				attempt = attempt + attempt;
				bits ++ ;
			} while (true);
			/**
			 * Now look for the other bits
			 * top exists
			 * attempt does not exist
			 */
			long step = top;
			while (bits > 1)
			{
				step = step / 2;
				attempt = top + step;
				es.caib.seycon.ng.comu.Account acc = accountService.findAccount(""+attempt, system);
				if (acc != null) top = attempt;
				bits --;
			}
		} finally {
			es.caib.seycon.ng.utils.Security.nestedLogoff();
		}
		return top;
	}
	
	
	void createInitialMetadata ()
	{
		es.caib.seycon.ng.servei.DadesAddicionalsService dataService = es.caib.seycon.ng.ServiceLocator.instance()
					.getDadesAddicionalsService();
		Map map = new HashMap();
		es.caib.zkib.binder.BindContext ctx = es.caib.zkib.datasource.XPathUtils.getComponentContext(innerWindow.getFellow("form"));
		List metadata = new LinkedList(dataService.findSystemDataTypes(ssoSystem));
		Collections.sort(metadata, new Comparator() {
		    int compare(Object td1, Object td2)
		    {
		    	return td1.ordre.compareTo(td2.ordre);
		    }

		});
		for ( es.caib.seycon.ng.comu.TipusDada td: metadata)
		{
			es.caib.seycon.ng.comu.DadaUsuari du = new es.caib.seycon.ng.comu.DadaUsuari();
			du.setCodiDada(td.getCodi());
			du.setDataLabel(td.getLabel());
			du.setSystemName(ssoSystem);
			du.setVisibility(com.soffid.iam.api.AttributeVisibilityEnum.EDITABLE);
			es.caib.zkib.datasource.XPathUtils.createPath(ctx.getDataSource(), ctx.getXPath()+"/attribute", du);
		}
		pageScope.put("accountNameOnAttribute", null);
		pageScope.put("newAccount", Boolean.TRUE);
		innerWindow.getFellow("txtAccountName2").setValue ("");
	}

	
	void onOpenFolder(String path) {
		es.caib.zkib.component.Form form = innerWindow.getFellow("form");
		form.setDataPath("/model:" + path);
		Events.sendEvent(new Event("onEnable", innerWindow
				.getFellow("ownerAcl"), true));
		Events.sendEvent(new Event("onEnable", innerWindow
				.getFellow("managerAcl"), true));
		Events.sendEvent(new Event("onEnable",
				innerWindow.getFellow("userAcl"), true));
		innerWindow.setTitle(org.zkoss.util.resource.Labels
				.getLabel("vault.folder.open"));
		innerWindow.doHighlighted();
	}
	
	void onCancel() {
		model.refresh();
		innerWindow.setVisible(false);
	}

	private String[] splitValues(String v)  {
		String[] result = new String[] {"", ""};
		if (v != null)
		{
			String[] split = v.split("=");
			if (split.length > 0)
				result[0] = java.net.URLDecoder.decode(split[0], "UTF-8");
			if (split.length > 1)
				result[1] = java.net.URLDecoder.decode(split[1], "UTF-8");
		}
		return result;
	}

	String findNameAttribute ()
	{
		es.caib.zkib.binder.BindContext ctx = es.caib.zkib.datasource.XPathUtils.getComponentContext(innerWindow.getFellow("form"));
		
		String accountAttributeXPath;
		for (Iterator iterator = ctx.getDataSource().getJXPathContext().iteratePointers(ctx.getXPath()+"/attribute");
				iterator.hasNext();)
		{
			es.caib.zkib.jxpath.Pointer p = iterator.next();
			es.caib.seycon.ng.comu.DadaUsuari du = p.getValue().getInstance();
			if (du.getCodiDada().startsWith("SSO:") &&
					Character.isDigit(du.getCodiDada().charAt(4)))
			{
				accountAttributeXPath = p.asPath();
				pageScope.put("accountNameOnAttribute", accountAttributeXPath);
				break;
			}
		}
		return accountAttributeXPath;
	}
	void onChangeAccountName (Component txtBox)
	{
		es.caib.zkib.binder.BindContext ctx = es.caib.zkib.datasource.XPathUtils.getComponentContext(txtBox);
		String accountAttributeXPath = pageScope.get("accountNameOnAttribute");
		if (accountAttributeXPath == null)
		{
			accountAttributeXPath = findNameAttribute();
		}
		if (accountAttributeXPath == null)
			return;
		
		String value = ctx.getDataSource().getJXPathContext().getValue(accountAttributeXPath+"/@valorDada");
		String[] result = splitValues(value);
		if (result[0].trim().length() == 0)
			result[0] = "user";
		result[1] = txtBox.getValue();
		String str = 
				java.net.URLEncoder.encode(result[0], "UTF-8")
				+ "="
				+java.net.URLEncoder.encode(result[1], "UTF-8");
		ctx.getDataSource().getJXPathContext().setValue(accountAttributeXPath+"/@valorDada", str);
	}
	
	void onApply() {

		es.caib.zkib.binder.BindContext ctx = es.caib.zkib.datasource.XPathUtils.getComponentContext(innerWindow.getFellow("form"));
		String system = es.caib.zkib.datasource.XPathUtils.getValue(ctx, "/@dispatcher");
		if (pageScope.get("newAccount"))
		{
			String currentName = es.caib.zkib.datasource.XPathUtils.getValue(ctx, "/@name");
			long l = findLastAccount (ssoSystem) + 1;
			es.caib.zkib.datasource.XPathUtils.setValue(ctx, "/@name", ""+l);	
		}

		model.commit();
		innerWindow.setVisible(false);

		Tree treebox = esquema.getFellow("lista").getFellow("treebox");

		String xPath = null;
		if (treebox.getSelectedItem() != null)
			xPath = treebox.getSelectedItem().getValue().getXPath();

		model.getVariables().declareVariable("directFilter", false);
		model.refresh();

		if (xPath != null)
			treebox.obreBrancaByXpath(xPath);

	}
	
	void selectParent() {
		es.caib.zkib.component.DataTree tree = selectFolderWnd
				.getFellow("folderTree");
		tree.setSelectedItem(null);
		selectFolderWnd.doHighlighted();
	}
	
	void selectedParentFolder() {
		es.caib.zkib.component.DataTree tree = selectFolderWnd
				.getFellow("folderTree");
		Treeitem item = tree.getSelectedItem();
		if (item != null) {
			es.caib.zkib.binder.BindContext ctx1 = es.caib.zkib.datasource.XPathUtils
					.getComponentContext(item);
			es.caib.zkib.binder.BindContext ctx2 = es.caib.zkib.datasource.XPathUtils
					.getComponentContext(innerWindow.getFellow("form"));
			es.caib.zkib.datasource.XPathUtils.setValue(ctx2, "@vaultFolder",
					es.caib.zkib.datasource.XPathUtils.getValue(ctx1, "@name"));
			es.caib.zkib.datasource.XPathUtils.setValue(ctx2, "@vaultFolderId",
					es.caib.zkib.datasource.XPathUtils.getValue(ctx1, "@id"));

		}
		selectFolderWnd.setVisible(false);
	}
	
	void checkIsUpdatePending() {
		try {
			es.caib.zkib.component.Form form = innerWindow.getFellow("form");
			es.caib.zkib.binder.BindContext ctx = es.caib.zkib.datasource.XPathUtils.getComponentContext(form);
			es.caib.zkib.datamodel.DataNode dn = es.caib.zkib.datasource.XPathUtils.getValue(ctx, ".");
			if (dn != null)
			{
				es.caib.seycon.ng.comu.Account acc = dn.getInstance();
				if (acc != null)
					
				{
					es.caib.seycon.ng.servei.AccountService accountService = es.caib.seycon.ng.ServiceLocator.instance().getAccountService();
					form.getFellow("updateIndicator").setVisible ( accountService.isUpdatePending(acc));
					es.caib.zkib.datasource.DataSource ds = ctx.getDataSource();
					
					String prefix = ctx.getXPath();
					ds.sendEvent(new es.caib.zkib.events.XPathRerunEvent(ds, XPathUtils.concat(prefix,"/@lastUpdated")));
					ds.sendEvent(new es.caib.zkib.events.XPathRerunEvent(ds, XPathUtils.concat(prefix,"/@lastPasswordSet")));
					ds.sendEvent(new es.caib.zkib.events.XPathRerunEvent(ds, XPathUtils.concat(prefix,"/@passwordExpiration")));
				}
			}
		} catch (Exception e) {
			// Ignore error when no account is selected
		}
	}
	

	void queryPassword(Component button){
		try{
			if (! queryImg.isVisible())  return;
			
			showPassword.getFellow("qpassword").setValue("");
			showPassword.getFellow("popupPwd").setValue("");
			es.caib.zkib.binder.BindContext ctx = XPathUtils.getComponentContext(button);
			Account account = XPathUtils.getValue(ctx, ".").getInstance();
			es.caib.seycon.ng.servei.ejb.AccountService service = es.caib.seycon.ng.EJBLocator.getAccountService();
			if(service.isUpdatePending(account) && account.getType().equals(AccountType.PRIVILEGED))
			{
				showPassword.getFellow("qpassword").setValue(org.zkoss.util.resource.Labels.getLabel("selfService.UpdatePending"));
				showPassword.getFellow("labelPWDis").setVisible(false);
				showPassword.getFellow("qpassword").setMultiline(true);
				showPassword.setVisible(true);
				showPassword.setMode("highlighted");
			}
			else
			{
				Password pawd = service.queryAccountPassword(account);
				if(pawd!=null){
						String cadena = pawd.getPassword();
						String cadenaResultant = "";
						showPassword.getFellow("qpassword").setValue(cadena);
						int i = cadena.length();
						for(int j=0; j<i; j++){
							cadenaResultant = cadenaResultant + cadena.charAt(j) + "\t";
							Character c = cadena.charAt(j);
							if(c.isUpperCase(c)){
								cadenaResultant = cadenaResultant + org.zkoss.util.resource.Labels.getLabel("selfService.Majuscula");
							}
							if(c.isLowerCase(c)){
								cadenaResultant = cadenaResultant + org.zkoss.util.resource.Labels.getLabel("selfService.Minuscula");
							}
							if(c.isDigit(c)){
								cadenaResultant = cadenaResultant + org.zkoss.util.resource.Labels.getLabel("selfService.Number");
							}
							if(!c.isLetter(c) && !c.isDigit(c)){
								cadenaResultant = cadenaResultant + org.zkoss.util.resource.Labels.getLabel("selfService.Symbol");
							}
							cadenaResultant = cadenaResultant + "\n";
						}
						showPassword.getFellow("popupPwd").setValue(cadenaResultant);
						showPassword.getFellow("labelPWDis").setVisible(true);
				}
				else{
					showPassword.getFellow("qpassword").setValue(org.zkoss.util.resource.Labels.getLabel("selfService.EmptyField"));
					showPassword.getFellow("popupPwd").setValue("");
					showPassword.getFellow("labelPWDis").setVisible(true);
				}
				showPassword.setVisible(true);
				showPassword.setMode("highlighted");
			}	
		} catch ( InterruptedException e){}
	}
	

	void setPassword (Component button)
	{
		model.commit ();
		try{
			if (! passwordImg.isVisible())  return;
			es.caib.zkib.binder.BindContext ctx = XPathUtils.getComponentContext(button);
			Account account = XPathUtils.getValue(ctx, ".").getInstance();
			if (account.getType().equals(AccountType.USER)){
				newPasswordS.setAttribute("acco", account);
				es.caib.seycon.ng.servei.ejb.SelfService service = es.caib.seycon.ng.EJBLocator.getSelfService()
				String afectats = service.queryOtherAffectedAccounts(account);
				if(afectats != null){
					Missatgebox.confirmaOK_CANCEL(String.format(org.zkoss.util.resource.Labels.getLabel("selfService.Segur"),
							new Object[] {afectats}), 
							org.zkoss.util.resource.Labels.getLabel("selfService.Segur2") , 
							new EventListener(){
								public void onEvent(Event evt){
									if("onOK".equals(evt.getName())){
										newPasswordS.setVisible(true);
										newPasswordS.setMode("highlighted");
									}
								}
							});
				}
			}else if (account.getType().equals(AccountType.SHARED)){
				newPasswordS.setAttribute("acco", account);
				newPasswordS.setVisible(true);
				newPasswordS.setMode("highlighted");
			}else if (account.getType().equals(AccountType.PRIVILEGED)){
				newPassword.setAttribute("acco", account);
				java.util.Calendar dia = java.util.Calendar.getInstance();
				dia.add(java.util.Calendar.DAY_OF_MONTH, 1);
				newPassword.getFellow("timepwd").setValue(dia.getTime());
				dia.clear();
				newPassword.setVisible(true);
				newPassword.setMode("highlighted");
			}
		} catch ( InterruptedException e) {	}
	}

	void checkinAccount (Component c)
	{
		es.caib.zkib.binder.BindContext ctx = XPathUtils.getComponentContext(c);
		Account acc = XPathUtils.getValue(ctx, ".").getInstance();
		es.caib.zkib.zkiblaf.Missatgebox.confirmaOK_CANCEL("Please, confirm you want to return this account", 
				new org.zkoss.zk.ui.event.EventListener() {
					public void onEvent(Event evt) {
						if ("onOK".equals(evt.getName()))
						{
							es.caib.seycon.ng.servei.ejb.AccountService ejb = es.caib.seycon.ng.EJBLocator.getAccountService();
							ejb.checkinHPAccount(acc);
							innerWindow.getFellow("ownerRow").setVisible (false);
						}
					}
			}
		);
	}
	
]]></zscript>
	<script>
	function doCopy (uuid) {
		document.getElementById(uuid).style.display="inline"; 
		document.getElementById(uuid).select(); 
		document.execCommand('copy');
		document.getElementById(uuid).setSelectionRange (0,0); 
		document.getElementById(uuid).style.display="none"; 
	}
	function doView (uuid1, uuid2) {
		document.getElementById(uuid2).style.display="inline"; 
		document.getElementById(uuid1).style.display="none"; 
	}
	</script>
	<window id="innerWindow" visible="false" sizable="true"
		position="center,center" width="80%">
		<form id="form" dataPath="/model:/void" orient="vertical"
			width="100%" style="padding: 10px">
			<timer delay="10000" repeats="true"
				onTimer="checkIsUpdatePending();" />
			<tabbox id="panels" width="${amplaria2}"
				class="thicktabbox">
				<tabs>
					<tab label="${c:l('usuaris.zul.Informaciabasica')}" />
					<tab label="${c:l('accounts.attribute') }" />
				</tabs>

				<tabpanels>
					<tabpanel id="basica">
						<hbox width="100%" widths="50%,1px,45%,*">
							<grid>
								<rows>
									<row>
										<input_etiqueta value="${c:l('vault.account.folder')}:" />
										<div>
											<label bind="@vaultFolder" />
											<imageclic src="/img/root.gif" id="changeFolderButton" width="16px" height="16px" onClick="selectParent()">
											</imageclic>
										</div>
									</row>
									<row id="nameRow">
										<input_etiqueta
											value="${c:l('accounts.name')}:" />
										<div>
											<image
												 style="float:right"
												src="~./img/exclamacio.gif" id="updateIndicator"
												visible="false" width="16px" height="16px">
											</image>
											<label value="*" style="float:right"/>
											<div style="padding: 0 5px 0 0; overflow: hidden">
												<input_dada
													id="txtAccountName" bind="@name"
													maxlength="128"
													multiline_custom="false" width_custom="95%" />
												<textbox sclass="textbox"
													id="txtAccountName2" 
													onChange="onChangeAccountName(self)"
													maxlength="128"
													multiline="false" width="90%" />
											</div>
										</div>
									</row>
									<row id="dispatcherRow">
										<input_etiqueta
											style="white-space:nowrap;"
											value="${c:l('accounts.dispatcher')}:" />
										<hbox>
											<listbox bind="@dispatcher"
												id="lbAccountDispatcher" mold="select"
												dataPath="/model:/dispatcher">
												<dataitem
													bind="@codi">
													<listcell
														bind="@codi" />
												</dataitem>
											</listbox>

											<label value="*" />
										</hbox>
									</row>
									<row id="typeRow">
										<input_etiqueta
											style="white-space:nowrap;" value="${c:l('accounts.type')}:" />
										<listbox bind="@type"
											id="lbAccountType" mold="select" dataPath="/model:/type">
											<dataitem bind="@value">
												<listcell
													bind="@literal" />
											</dataitem>
										</listbox>
									</row>
									<row id="passwordPolicyRow">
										<input_etiqueta
											style="white-space:nowrap;"
											value="${c:l('accounts.policy')}:" />

										<hbox>
											<listbox
												bind="@passwordPolicy" id="lbPolicy" mold="select"
												dataPath="/model:/tipusUsuari">
												<dataitem
													bind="@codi">
													<listcell
														bind="@descripcio" />
												</dataitem>
											</listbox>

											<label value="*" />
										</hbox>
									</row>
									<row>
										<input_etiqueta
											value="${c:l('accounts.description')}:" />
										<input_dada
											id="txtAccountDescription" bind="@description"
											maxlength="255"
											multiline_custom="false" width_custom="97%" />
									</row>
									<row id="urlRow">
										<input_etiqueta
											value="${c:l('vault.account.url')}:" />
										<textbox
											id="urlTextbox"
											sclass="textbox" 
											maxlength="255"
											multiline="false" width="100%" >
											<attribute name="onChanging"><![CDATA[
										    		self.setStyle("");
											]]></attribute>
											<attribute name="onChange">
												<![CDATA[
												    String value = self.getValue();
												    if (value == null || value.trim().length () == 0)
												    {
												    	serverTextbox.getFellow("dada").setValue("");
												    }
												    else
												    {
												    	try {
													    	java.net.URL url = new java.net.URL(value);
												    		self.setStyle("");
												    		String h = url.getHost();
												    		if (h.startsWith("www."))
												    			h = h.substring(4);
													    	serverTextbox.getFellow("dada").setValue( h );
												    	} catch (Exception e) {
												    		self.setStyle("background-color: pink");
												    	}
												    }
												]]>
											</attribute>
										</textbox>
									</row>
									<row id="serverRow">
										<input_etiqueta
											value="${c:l('vault.account.server')}:" />
										<input_dada
											id="serverTextbox" 
											maxlength="128"
											multiline_custom="false" width_custom="100%" />
									</row>
									<row>
										<input_etiqueta
											value="${c:l('accounts.lastUpdated')}:" />
										<datebox readonly="true"
											disabled="true" bind="@lastUpdated" width="10em"
											format="${c:l('usuaris.zul.dateFormat')}" />
									</row>
									<row>
										<input_etiqueta
											value="${c:l('accounts.lastPasswordSet')}:" />
										<hbox>
											<datebox readonly="true"
												disabled="true" bind="@lastPasswordSet" width="10em"
												format="${c:l('usuaris.zul.dateFormat')}" />
											<imageclic src="/img/lupa.gif" id ="queryImg">
												<attribute name="onClick">
													queryPassword(self);
												</attribute>
											</imageclic>
											<imageclic src="~./img/pwd.gif" id="passwordImg" title="${c:l('accounts.setPassword')}">
												<attribute name="onClick">
													setPassword(self);
												</attribute>
											</imageclic>
										</hbox>
									</row>
									<row>
										<input_etiqueta
											value="${c:l('accounts.passwordExpiration')}:" />
										<datebox readonly="true"
											disabled="true" bind="@passwordExpiration" width="10em"
											format="${c:l('usuaris.zul.dateFormat')}" />
									</row>
									<row id="enabledRow">
										<input_etiqueta
											value="${c:l('accounts.status')}:" />
										<listbox bind="@disabled"
											id="lbAccountDisabled" mold="select">
											<listitem
												value="${false}">
												<listcell
													label="${c:l('accounts.Enabled')}" />
											</listitem>
											<listitem value="${true}">
												<listcell
													label="${c:l('accounts.Disabled')}" />
											</listitem>
										</listbox>
									</row>
									<row id="ownerRow">
										<label value="Owner:" />
										<div>
											<label style="margin-left: 6px; margin-right: 4px" bind="/owner/@codi"></label>
											<image src="/img/cancel.png" width="12px" height="12px" onClick="checkinAccount(self)"/>
										</div>
									</row>
								</rows>
							</grid>
							<separator />
							<vbox>
								<label value="${c:l('accounts.owner')}" />
								<account_acl id="ownerAcl"
									userList="ownerUsers" groupList="ownerGroups"
									roleList="ownerRoles" />
								<label
									value="${c:l('accounts.manager')}" />
								<account_acl id="managerAcl"
									userList="managerUsers" groupList="managerGroups"
									roleList="managerRoles" />
								<label value="${c:l('accounts.userAccess')}" />
								<account_acl id="userAcl"
									userList="grantedUsers" groupList="grantedGroups"
									roleList="grantedRoles" />
								<checkbox id="inheritNewPermissionsCheckbox" bind="@inheritNewPermissions" label="${c:l('vault.account.inheritPermissions')}"></checkbox>
							</vbox>
						</hbox>
					</tabpanel>

					<tabpanel id="attributes">
						<grid dataPath="attribute" sclass="noBorderGrid" fixedLayout="true" onNewRow="onNewAttributeRow(event.data)">
							<columns>
								<column width="260px"/>
								<column />
							</columns>
							<datarow>
								<input_etiqueta bind="@dataLabel" width_custom="250px"/>
								<div use="com.soffid.iam.web.users.additionalData.InputField" onChange=""/>
							</datarow>
						</grid>
					</tabpanel>
				</tabpanels>
			</tabbox>

			<div style="float:right; margin-top: 2em;">
				<button label="${c:l('accounts.setPassword.Cancel')}"
					onClick="onCancel()" />
				<button label="${c:l('accounts.setPassword.OK')}"
					onClick="onApply()" />
			</div>
		</form>
	</window>
	<window id="selectFolderWnd" visible="false" sizable="true"
		position="center,center" width="50%"
		title="${c:l('vault.folder.SelectParentFolder')}">
		<tree autocommit="false" dataPath="/model:/" fixedLayout="false"
			width="100%" rows="10" id="folderTree">
			<treeitemfinder bind="." open="false" path="/folder">
				<treerow
					onDoubleClick="if (folderTree.getSelectedCount() > 0) selectParentFolder();">
					<treecell>
						<image src="/img/root.gif" height="1em" />
						<label bind="@name"
							style="display: inline-block; padding-bottom: 5px; padding-top: 5px;" />
					</treecell>
				</treerow>
			</treeitemfinder>
		</tree>
		<div style="float:right; margin-top: 2em;">
			<button label="${c:l('accounts.setPassword.Cancel')}"
				onClick="selectFolderWnd.setVisible(false);" />
			<button id="selectButton"
				label="${c:l('accounts.setPassword.OK')}"
				onClick="selectedParentFolder()" />
		</div>
	</window>
	
	<window id="newPassword" closable="true" sclass="new-pass"
			position="center, center" sizable="true"
			title="${c:l('selfService.NewPassword')}" visible="false" width="31em"
			onClose="onCancelPassword(); event.stopPropagation();">
		<zscript>
			<![CDATA[
				void onCancelPassword() {
					password.setValue("");
					newPassword.setVisible(false);
				}

				void onSetPassword() {
					es.caib.seycon.ng.servei.ejb.SelfService service = es.caib.seycon.ng.EJBLocator.getSelfService();
					Account account = newPassword.getAttribute("acco");
					timepwd.getValue();
					boolean done = service.setHPAccountPassword(account,
							new Password(password.getValue()), timepwd.getValue(),
								checkpwd.isChecked());
					if (done)
					{
						es.caib.zkib.zkiblaf.Missatgebox
							.confirmaOK(org.zkoss.util.resource.Labels
							.getLabel("accounts.setPassword.msg"));
						BindContext ctx = XPathUtils.getComponentContext(form);
						XPathUtils.getValue(ctx, "/owner").refresh();
						innerWindow.getFellow("ownerRow").setVisible (true);
					}
					else
					{
						es.caib.zkib.zkiblaf.Missatgebox
						.confirmaOK(org.zkoss.util.resource.Labels
						.getLabel("accounts.setPassword.delayed.msg"));
					}
					onCancelPassword();
				}
			]]>
		</zscript>
		<div width="100%">
	 		<div class="label" align="center">
				<label value="${c:l('accounts.setPassword.label')}"/>
				<space width="1em"/>
				<textbox id="password" type="password" width="18em" onOK="onSetPassword();"/>
			</div>
			<div class="label" align="center">
				<label id="lblpwd" value="${c:l('selfService.Valid')}"/>
				<space width="1em"/>
				<datebox id="timepwd" width="18em"
					format="${c:l('selfService.Format')}" constraint="no past,no empty"/>
			</div>
			<div class="label" align="center">
				<label id="lblcheckpwd" value="${c:l('selfService.Force')}"/>
				<checkbox id="checkpwd"/> 
			</div>
			<div align="center">
				<button label="${c:l('accounts.setPassword.OK')}"
					onClick="onSetPassword()" />
				<space width="1em" />
				<button label="${c:l('accounts.setPassword.Cancel')}"
					onClick="onCancelPassword()" />
			</div>
		</div>
	</window>
	<window id="showPassword" closable="true" sclass="show-pass"
		position="center, center" sizable="true"
		title="${c:l('selfService.QueryPasswords')}" visible="false" width="31em"
		onClose="onCancelPassword(); event.stopPropagation();">
		<zscript>
			<![CDATA[
				void onCancelPassword() {
					qpassword.setValue("");
					showPassword.setVisible(false);
				}
			]]>
		</zscript>
		<popup id="toolPwd">
			<vbox>
				<label id="popupPwd" multiline="true"/>
			</vbox>
		</popup>
		<vbox width="100%" align="center">
			<space width="2em"/>
			<hbox align="center">
				<attribute name="onCreate"><![CDATA[
				// Change button order
				self.insertBefore(viewImage, fakeqpassword);
				]]>
				</attribute>
				<label id="labelPWDis" value="${c:l('selfService.ThePWDis')}"/>
				<textbox readonly="true" type="password" style="padding: 0; border: none; outline: none; boxShadow:none; background: transparent"
					id="fakeqpassword" value="abc12646asd4f645a4f6"/> 
				<textbox readonly="true" style="display:none; padding: 0; border: none; outline: none; boxShadow:none; background: transparent" 
					id="qpassword" tooltip="toolPwd"/>
				<imageclic id="viewImage" src="/img/lupa.gif" action="onMouseOver: doView('${fakeqpassword.uuid}','${qpassword.uuid}');
					onMouseLeave: doView('${qpassword.uuid}','${fakeqpassword.uuid}')"
					title="${c:l('vault.account.view') }"
					tooltip="toolPwd"
				/>
				<imageclic src="/img/edit-copy.png" action="onClick: doCopy('${qpassword.uuid}')"
					title="${c:l('vault.account.copy')}"/>
		</hbox>
			<space width="2em"/>
			<hbox>
				<button label="${c:l('selfService.Close')}"
					onClick="onCancelPassword()" />
			</hbox>
			<space width="1em"/>
		</vbox>
	</window>
	<window id="newPasswordS" closable="true" sclass="new-pass"
		position="center, center" sizable="true"
		title="${c:l('selfService.NewPassword')}" visible="false" width="34em"
		onClose="onCancelPassword(); event.stopPropagation();">
		<zscript>
			<![CDATA[
				void onCancelPassword() {
					p1.setValue("");
					newPasswordS.setVisible(false);
				}
				
				void onSetPassword() {
					es.caib.seycon.ng.servei.ejb.SelfService service = es.caib.seycon.ng.EJBLocator.getSelfService();
					Account account = newPasswordS.getAttribute("acco");
					service.setAccountPassword(account, new Password(p1.getValue()));
					es.caib.zkib.zkiblaf.Missatgebox.confirmaOK(org.zkoss.util.resource.Labels.getLabel("accounts.setPassword.msg"));
					onCancelPassword();
					checkIsUpdatePending();
				}
			]]>
		</zscript>
		<vbox width="100%" align="center">
	 		<div align="center" class="label">
				<label value="${c:l('accounts.setPassword.label')}"/>
				<space width="1em"/>
				<textbox type="password" width="18em" id="p1" onOK="onSetPassword();"/>
			</div>
			
			<div align="center">
				<button label="${c:l('accounts.setPassword.OK')}"
					onClick="onSetPassword()" />
				<space width="1em"/>
				<button label="${c:l('accounts.setPassword.Cancel')}"
					onClick="onCancelPassword()" />
			</div>
		</vbox>
	</window>
	
</zk>